---
title: "MachineLearning - Script 2 - Recursive Feature Selection"
author: 
  - name: "MSc. Friederike Johanna Rosa WÃ¶lke"
    orcid: "0000-0001-9034-4883"
    url: "https://friedarosa.github.io"
    email: "wolke@fzp.czu.cz"
    corresponding: true
date: "2023-05-29"
format: 
  html:
    toc: true
    code-fold: true
    code-overflow: wrap
    bibliography: references.bib
keep-tex: true
---



::: panel-tabset
## Source custom functions


```{r}
#| label: load-packages
#| message: FALSE
#| warning: FALSE
rm(list = ls())
source("../src/functions.R")

```


## MachineLearning packages


```{r}
#| label: load-ML-packages
#| message: FALSE
#| error: FALSE

pckgs <- c("dplyr", "ggplot2", "reshape2", 
           "ggcorrplot", 
           "caret",  "recipes",   "caretEnsemble", 
           "randomForest", "ranger", "gbm", "xgboost", 
           "vegan", "pdp", 
           "gridExtra", "kableExtra")

install_and_load(pckgs)
```


## Load RData to reduce computing time


```{r}
#| label: load-RData
#| message: FALSE
#| error: FALSE

# Load workspace to save computing time:
## it has: varPart from ranger models
## recursive feature selection results

# load("data/varPart_rfe.RData")
# load("data/models.RData")
load("../data/RData/01_Data_prep.RData")
```

:::

### Predictor importance / Recursive Feature Selection


```{r}
#| eval = FALSE

index_list <- list(indices_J1, indices_J2, indices_LR1, indices_LR2)
dat_train_list <- list(dat_train_J1, dat_train_J2, dat_train_LR1, dat_train_LR2)

saved_profiles <- replicate(4, list())
names(saved_profiles) <- c("J1", "J2", "LR1", "LR2")
save_imp <- replicate(4, list())
names(save_imp) <- c("J1", "J2", "LR1", "LR2")

response_list <- c("Jaccard", "Jaccard", "log_R2_1", "log_R2_1")

for(j in seq_along(1:4)){
  ## Loop through differet datasets/Analyses
  indices <- index_list[[j]]
  dat_train <- dat_train_list[[j]]
  response <- response_list[[j]] 

  ## Recursive feature selection:
  set.seed(42)
  ctrl <- rfeControl(
    functions = rfFuncs,
    method = "repeatedcv",
    number = 10,
    repeats = 3,
    returnResamp = "all", # we need all resamples
    verbose = FALSE,
    index = indices,
    saveDetails = TRUE)

  ## Set variables for loop
  subsets <- c(1:50) # number of predictors in each run
  x <- dat_train %>% select(!all_of(response))
  y <- dat_train %>% pull(response)

  
  tictoc::tic(paste("rfe-loop-100-runs", response))
  for (i in 1:100){
    
    ## First run:
    rfProfile <- rfe(x, y, sizes = subsets, rfeControl = ctrl, ntrees = 500)
    rfProfile
    
    # Most important predictors:
    imp <- rfProfile$fit$importance %>% 
      round(3) %>% 
      as.data.frame() %>%
      select("%IncMSE") %>%
      arrange(desc(.))
    
    saved_profiles[[j]][[i]] <- rfProfile
    saved_imp[[j]][[i]] <- imp
    }
  tictoc::toc()
  }

saveRDS("../data/RData/02_rfe_saved_profiles.rds")
save.image("../data/rfe.RData")
```

```{r}
#| label: rfe-results
#| fig.height: 10
#| fig.width: 8

load("../data/rfe.RData")

results <- replicate(100, list())
for(j in seq_along(1:4)){
    for (i in seq_along(1:100)){
        resamp_res <- saved_profiles[[j]][[i]]
        res <- slice_min(resamp_res$results, RMSE)
        results[[j]][[i]] <- res
    }
}

names(results) <- c("J1", "J2", "LR1", "LR2")

rfe_res <- do.call(rbind, unlist(results, recursive = FALSE))
rfe_res$dd <- rep(c("J1", "J2", "LR1", "LR2"), 100)
ggplot(data = rfe_res, aes(x = dd, y = Variables)) +
    geom_boxplot() +
    geom_point(data = rfe_res %>% group_by(dd) %>% summarize(mean_Variables = mean(Variables)), 
    aes(x = dd, y = mean_Variables), color = "red") +
    theme_bw()

rfe_res %>% group_by(dd) %>% summarize(mean_Variables = mean(Variables)) # 25.4 for both
rfe_res %>% group_by(dd) %>% summarize(median_Variables = median(Variables)) # 26 for default, 24 for simple. Let's go with the results for the default model: 26.

saved_res2 <- unlist(saved_profiles, recursive = FALSE)
saved_res3 <- saved_res2[c(seq(from = 1, to = 20, by = 2))] # keep only default models

res_top_vars <- list()
for(i in seq_along(saved_res3)){

res_top_vars[[i]] <- data.frame(
    var = row.names(varImp(saved_res3[[i]], scale = T)),
    Imp = varImp(saved_res3[[i]])$Overall,
    include = c(rep_len(1, as.numeric(saved_res3[[i]]$bestSubset)), 
                rep_len(0,  
                length(row.names(varImp(saved_res3[[i]], scale = T)))-as.numeric(saved_res3[[i]]$bestSubset))
            ),
    model = i
        )
}

res_top_vars_df <- do.call(rbind, res_top_vars)



### Plot =====

# Calculate the maximum count of resamples for scaling
max_count <- res_top_vars_df %>% count(var) %>% pull(n) %>% max()

ggplot(data = res_top_vars_df) +
  # Background rectangles
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 10.5), 
            fill = "lightgray", alpha = 0.9) +
  # Box plot
  geom_boxplot(aes(y = reorder(var, Imp), x = Imp)) +
  # Bar plot scaled to the secondary axis
  geom_bar(aes(y = reorder(var, Imp), x = after_stat(count) / max_count * max(res_top_vars_df$Imp), 
               fill = factor(include)), stat = "count",  alpha = 0.3) +
  # Horizontal line
  geom_hline(yintercept = 10.5) +
  # Secondary axis that stretches through the entire range
  scale_x_continuous(sec.axis = sec_axis(~ . * max_count / max(res_top_vars_df$Imp), 
                                         name = "Count Resamples (Secondary Axis)")) +
  # Scale and theme
  scale_fill_manual(values = c("#D55E00", "#009E73")) +
  theme_bw() +
  theme(legend.position = "right") +
  labs(title = "Top Variables by Importance", x = "Importance", y = "Variable")


```

