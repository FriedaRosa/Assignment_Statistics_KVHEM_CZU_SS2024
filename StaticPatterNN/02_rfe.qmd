---
title: "MachineLearning - Script 2 - Recursive Feature Selection"
author: 
  - name: "MSc. Friederike Johanna Rosa WÃ¶lke"
    orcid: "0000-0001-9034-4883"
    url: "https://friedarosa.github.io"
    email: "wolke@fzp.czu.cz"
    corresponding: true
date: "2023-05-29"
format: 
  html:
    toc: true
    code-overflow: wrap
    bibliography: references.bib
    monofont: Cascadia Code
---

::: panel-tabset
## Source custom functions

```{r}
#| label: load-packages
#| message: FALSE
#| warning: FALSE
rm(list = ls())

source("../src/functions.R")

```

## MachineLearning packages

```{r}
#| label: load-ML-packages
#| message: FALSE
#| error: FALSE

pckgs <- c("dplyr", "ggplot2", "reshape2", 
           "ggcorrplot", 
           "caret",  "recipes",   "caretEnsemble", 
           "randomForest", 
           "gridExtra", "kableExtra", "tidyr")

install_and_load(pckgs)
```

## Load RData to reduce computing time

```{r}
#| label: load-RData
#| message: FALSE
#| error: FALSE

# Load workspace to save computing time:
## it has: varPart from ranger models
## recursive feature selection results

# load("data/varPart_rfe.RData")
# load("data/models.RData")
# load("../data/RData/01_Data_prep.RData")
load("../data/RData/02_rfe.RData")
```
:::

### Predictor importance / Recursive Feature Selection

```{r}
#| eval: false
#| label: rfe-loop


index_list <- list(indices_J1, indices_J2, indices_LR1, indices_LR2)
dat_train_list <- list(dat_train_J1, dat_train_J2, dat_train_LR1, dat_train_LR2)

saved_profiles <- replicate(4, list())
# names(saved_profiles) <- c("J1", "J2", "LR1", "LR2")
save_imp <- replicate(4, list())
# names(save_imp) <- c("J1", "J2", "LR1", "LR2")

response_list <- c("Jaccard", "Jaccard", "log_R2_1", "log_R2_1")

for(j in seq_along(1:4)){
  ## Loop through differet datasets/Analyses
  indices <- index_list[[j]]
  dat_train <- dat_train_list[[j]]
  response <- response_list[[j]] 
  saved_profiles[[j]] <- replicate(4, list())
  save_imp[[j]] <- replicate(4, list())
  
  ## Recursive feature selection:
  set.seed(42)
  ctrl <- rfeControl(
    functions = rfFuncs,
    method = "repeatedcv",
    number = 10,
    repeats = 3,
    returnResamp = "all", # we need all resamples
    verbose = FALSE,
    index = indices,
    saveDetails = TRUE)

  ctrl$functions$rank <- rank #adjust rank function

  ## Set variables for recursive feature elimination
  subsets <- c(1:50) # number of predictors in each run
  x <- dat_train %>% select(!all_of(response))
  y <- dat_train %>% pull(response)
  
  ## First run:
  set.seed(42)
  rfProfile <- rfe(x, y, ntree = 1000, sizes = subsets, rfeControl = ctrl)
  rfProfile
    
  # Most important predictors:
  imp <- as.data.frame(rfProfile$fit$importance) %>%
                   round(3) %>%
                   select(`%IncMSE`) %>% 
                   mutate(var = row.names(.)) %>%
                   arrange(desc(`%IncMSE`))    
    
  saved_profiles[[j]] <- rfProfile
  save_imp[[j]] <- imp
}

saveRDS(saved_profiles, file = "../data/02_rfe_saved_profiles_5000.rds")
save.image(file = "../data/RData/02_rfe_5000.RData")
```

```{r}
#| label: rfe-results-eval
#| fig.height: 4
#| fig.width: 4
#| eval: true
#| warning: false

results <- replicate(4, list())
    for (i in seq_along(1:4)){
        resamp_res <- saved_profiles[[i]]
        res <- slice_min(resamp_res$results, RMSE)
        results[[i]] <- res
    }

names(results) <- c("J1", "J2", "LR1", "LR2")
rfe_res <- do.call(rbind, results)
rfe_res$dd <- rownames(rfe_res)


# Bar plot: Nr. Vars selected for each analysis 
ggplot(data = rfe_res, aes(x = dd, y = Variables)) +
    geom_col(fill = "lightgrey") +
    geom_point(data = rfe_res %>% group_by(dd) %>% summarize(mean_Variables = mean(Variables)), 
    aes(x = dd, y = mean_Variables), color = "red") +
    theme_classic()+
    labs(title = "Number of variables selected per analysis", y = "Number of variables selected", x = "Analysis")


# Add mean importance across resamples to results
saved_profiles[[1]]$variables <- saved_profiles[[1]]$variables %>% filter(Variables == 39) %>%
  group_by(var) %>%
  mutate(Overall_mean_resamp = mean(Overall)) %>%
  mutate(hypo = case_when(var %in% H1_vars ~ "H1",
                          var %in% H2_vars ~ "H2",
                          var %in% H3_vars ~ "H3",
                          var %in% H4_vars ~ "H4"))

saved_profiles[[2]]$variables <- saved_profiles[[2]]$variables %>% filter(Variables == 38) %>%
  group_by(var) %>%
  mutate(Overall_mean_resamp = mean(Overall))%>%
  mutate(hypo = case_when(var %in% H1_vars ~ "H1",
                          var %in% H2_vars ~ "H2",
                          var %in% H3_vars ~ "H3",
                          var %in% H4_vars ~ "H4"))

saved_profiles[[3]]$variables <- saved_profiles[[3]]$variables %>% filter(Variables == 39) %>%
  group_by(var) %>%
  mutate(Overall_mean_resamp = mean(Overall))%>%
  mutate(hypo = case_when(var %in% H1_vars ~ "H1",
                          var %in% H2_vars ~ "H2",
                          var %in% H3_vars ~ "H3",
                          var %in% H4_vars ~ "H4"))

saved_profiles[[4]]$variables <- saved_profiles[[4]]$variables %>% filter(Variables == 38) %>%
  group_by(var) %>%
  mutate(Overall_mean_resamp = mean(Overall))%>%
  mutate(hypo = case_when(var %in% H1_vars ~ "H1",
                          var %in% H2_vars ~ "H2",
                          var %in% H3_vars ~ "H3",
                          var %in% H4_vars ~ "H4"))
```

::: panel-tabset
## Jaccard

```{r}
#| label: rfe-results-boxplot-j
#| fig.height: 8
#| fig.width: 10
#| eval: true
#| warning: false


grid.arrange(ncol=2,
saved_profiles[[1]]$variables %>% filter(Variables == 39) %>%
  group_by(var) %>%
  ggplot()+
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 39-14.5), fill = "lightgray", alpha = 0.9) +
  geom_boxplot(aes(y = reorder(var, Overall), x = Overall, fill = hypo ), show.legend = FALSE)+
  geom_point(aes(x = Overall_mean_resamp, y = var), col = "red", alpha = 0.4)+
  theme_classic()+
  xlim(0,40)+
  scale_fill_manual(values = c("#e66101", "#fdb863", "#b2abd2", "#5e3c99")) +
  labs(title = "Variables by Importance: Jaccard tp = 1", x = "Importance", y = "Variable"),


saved_profiles[[2]]$variables %>% filter(Variables == 38) %>%
  group_by(var) %>%
  ggplot()+
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 39-15.5), fill = "lightgray", alpha = 0.9) +
  geom_boxplot(aes(y = reorder(var, Overall), x = Overall, fill = hypo ))+
  geom_point(aes(x = Overall_mean_resamp, y = var), col = "red", alpha = 0.4)+
  theme_classic()+
  xlim(0,40)+
  scale_fill_manual(values = c("#e66101", "#fdb863", "#b2abd2", "#5e3c99")) +
  labs(title = "Variables by Importance: Jaccard tp = 2", x = "Importance", y = "Variable")
)
```

## Log Ratio

```{r}
#| label: rfe-results-boxplot-lr
#| fig.height: 8
#| fig.width: 10
#| eval: true
#| warning: false


grid.arrange(ncol=2,
saved_profiles[[3]]$variables %>% filter(Variables == 39) %>%
  group_by(var) %>%
  ggplot()+
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 39-36.5), fill = "lightgray", alpha = 0.9) +
  geom_boxplot(aes(y = reorder(var, Overall), x = Overall, fill = hypo ), show.legend = FALSE)+
  geom_point(aes(x = Overall_mean_resamp, y = var), col = "red", alpha = 0.4)+
  theme_classic()+
  xlim(0,40)+
  scale_fill_manual(values = c("#e66101", "#fdb863", "#b2abd2", "#5e3c99")) +
  labs(title = "Variables by Importance: log ratio tp = 1", x = "Importance", y = "Variable"),

saved_profiles[[4]]$variables %>% filter(Variables == 38) %>%
  group_by(var) %>%
  ggplot()+
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 39-34.5), fill = "lightgray", alpha = 0.9) +
  geom_boxplot(aes(y = reorder(var, Overall), x = Overall, fill = hypo ))+
  geom_point(aes(x = Overall_mean_resamp, y = var), col = "red", alpha = 0.4)+
  theme_classic()+
  xlim(0,40)+
  scale_fill_manual(values = c("#e66101", "#fdb863", "#b2abd2", "#5e3c99")) +
  labs(title = "Variables by Importance: log ratio tp = 2", x = "Importance", y = "Variable")
)
```
:::

```{r}
Imp_list <- replicate(4, list())
Imp_list[[1]] <- saved_profiles[[1]]$variables %>% 
  select(Overall_mean_resamp, var) %>%
  rename("imp" = "Overall_mean_resamp") %>%
  mutate(model = "J1")
Imp_list[[2]] <- saved_profiles[[2]]$variables %>%
  select(Overall_mean_resamp, var) %>%
  rename("imp" = "Overall_mean_resamp")%>%
  mutate(model = "J2")

Imp_list[[3]] <- saved_profiles[[3]]$variables %>%
  select(Overall_mean_resamp, var) %>%
  rename("imp" = "Overall_mean_resamp")%>%
  mutate(model = "LR1")

Imp_list[[4]] <- saved_profiles[[4]]$variables %>%
  select(Overall_mean_resamp, var) %>%
  rename("imp" = "Overall_mean_resamp")%>%
  mutate(model = "LR2")

Imp_df <- do.call(rbind, Imp_list)
wide <- Imp_df %>%
  tidyr::pivot_wider(names_from = c(model), 
                     values_from = imp, names_sep = "_", 
                     values_fn = mean) %>% 
  arrange(desc(J1)) %>% 
  group_by(var) %>%  
  mutate(hypo = case_when(var %in% H1_vars ~ "H1",
                          var %in% H2_vars ~ "H2",
                          var %in% H3_vars ~ "H3",
                          var %in% H4_vars ~ "H4"))


wide %>% write.csv("../data/csv/02_all_var_imp.csv")
wide %>% kableExtra::kable()
```

```{r}
# On best models (best hyper parameters)
saved_profiles[[1]]$fit 
saved_profiles[[1]]$fit %>% varImp()



saved_profiles[[2]]$fit
saved_profiles[[2]]$fit %>% varImp()



saved_profiles[[3]]$fit
saved_profiles[[3]]$fit %>% varImp()



saved_profiles[[4]]$fit 
saved_profiles[[4]]$fit %>% varImp()



```
