---
title: "MachineLearning - Script 5 - Variation Partitioning"
author: 
  - name: "MSc. Friederike Johanna Rosa WÃ¶lke"
    orcid: "0000-0001-9034-4883"
    url: "https://friedarosa.github.io"
    email: "wolke@fzp.czu.cz"
    corresponding: true
date: "2023-05-29"
---

::: panel-tabset
## Source custom functions

```{r}
#| label: load-packages
#| message: FALSE
#| warning: FALSE
rm(list = ls())
#setwd("StaticPatterNN/")
source("../src/functions.R")

```

## MachineLearning packages

```{r}
#| label: load-ML-packages
#| message: FALSE
#| error: FALSE

pckgs <- c("dplyr", "ggplot2", "reshape2", 
           "ggcorrplot", 
           "caret",  "recipes",   "caretEnsemble", 
           "randomForest", "ranger", "gbm", "xgboost", 
           "vegan", "pdp", 
           "gridExtra", "kableExtra")

install_and_load(pckgs)
```

## Load RData to reduce computing time

```{r}
#| label: load-RData
#| message: FALSE
#| error: FALSE

# Load workspace to save computing time:
## it has: varPart from ranger models
## recursive feature selection results

# load("data/varPart_rfe.RData")
# load("data/models.RData")

load("../data/RData/01_Data_prep.RData")
J1_varPart_ranger_list <- readRDS("../data/rds/05b_J1_varPart_list.rds")
J2_varPart_ranger_list <- readRDS("../data/rds/05b_J2_varPart_list.rds")
LR1_varPart_ranger_list <- readRDS("../data/rds/05b_LR1_varPart_list.rds")
LR2_varPart_ranger_list <- readRDS("../data/rds/05b_LR2_varPart_list.rds")
```
:::

### Variation Partitioning between Hypotheses

Now we will look which of the four hypotheses explains most variation in the response.
First will will use the varpart function from the vegan package for this, and second we will do the same manually with random forest models.

::: panel-tabset
## Jaccard - Sampling Period 1

```{r}
#| label: var-part-vegan-J1
#| message: FALSE
#| warning: FALSE
#| error: FALSE

dat_train <- dat_train_J1
# Create a data frame for each set of variables
H1_data <- dat_train %>% select(any_of(H1_vars))
H2_data <- dat_train %>% select(any_of(H2_vars))
H3_data <- dat_train %>% select(any_of(H3_vars))
H4_data <- dat_train %>% select(any_of(H4_vars))

# Perform basic variation partitioning (vegan package)
varpart_model1 <- varpart(dat_train$Jaccard, H1_data, H2_data, H3_data, H4_data)

## VENN-diagram
plot(varpart_model1,
     Xnames = c("Species Traits", "Species Range Geometry", "Diversity", "Atlas characteristics"), # name the partitions
     bg = c("seagreen3", "mediumpurple", "darkorange", "gold"), alpha = 80, # colour the circles
     digits = 2, # only show 2 digits
     cex = 0.8,
     id.size = 1)


# Test for significance in results:
anova.cca(rda(dat_train$Jaccard, H1_data)) # sign. p = 0.001
anova.cca(rda(dat_train$Jaccard, H2_data)) # sign. p = 0.001
anova.cca(rda(dat_train$Jaccard, H3_data)) # sign. p = 0.001
anova.cca(rda(dat_train$Jaccard, H4_data)) # sign. p = 0.001

```

## Jaccard - Sampling Period 2

```{r}
#| label: var-part-vegan-J2
#| message: FALSE
#| warning: FALSE
#| error: FALSE

dat_train <- dat_train_J2

# Create a data frame for each set of variables
H1_data <- dat_train %>% select(any_of(H1_vars))
H2_data <- dat_train %>% select(any_of(H2_vars))
H3_data <- dat_train %>% select(any_of(H3_vars))
H4_data <- dat_train %>% select(any_of(H4_vars))

# Perform basic variation partitioning (vegan package)
# varpart_model2 <- varpart(dat_train$Jaccard, H1_data, H2_data, H3_data, H4_data)

# # Print the results
# print(varpart_model2)
# summary(varpart_model2)

# ## VENN-diagram
# plot(varpart_model2,
#      Xnames = c("Species Traits", "Species Range Geometry", "Diversity", "Atlas characteristics"), # name the partitions
#      bg = c("seagreen3", "mediumpurple", "darkorange", "gold"), alpha = 80, # colour the circles
#      digits = 2, # only show 2 digits
#      cex = 0.8,
#      id.size = 1)

# Test for significance in results:
anova.cca(rda(dat_train$Jaccard, H1_data)) # sign. p = 0.001
anova.cca(rda(dat_train$Jaccard, H2_data)) # sign. p = 0.001
anova.cca(rda(dat_train$Jaccard, H3_data)) # sign. p = 0.001
anova.cca(rda(dat_train$Jaccard, H4_data)) # sign. p = 0.001

```

## Log Ratio - Sampling Period 1

```{r}
#| label: var-part-vegan-LR1
#| message: FALSE
#| warning: FALSE
#| error: FALSE

dat_train <- dat_train_LR1
# Create a data frame for each set of variables
H1_data <- dat_train %>% select(any_of(H1_vars))
H2_data <- dat_train %>% select(any_of(H2_vars))
H3_data <- dat_train %>% select(any_of(H3_vars))
H4_data <- dat_train %>% select(any_of(H4_vars))

# # Perform basic variation partitioning (vegan package)
# varpart_model3 <- varpart(dat_train$log_R2_1, H1_data, H2_data, H3_data, H4_data)

# # Print the results
# print(varpart_model3)
# summary(varpart_model3)



# ## VENN-diagram
# plot(varpart_model3,
#      Xnames = c("Species Traits", "Species Range Geometry", "Diversity", "Atlas characteristics"), # name the partitions
#      bg = c("seagreen3", "mediumpurple", "darkorange", "gold"), alpha = 80, # colour the circles
#      digits = 2, # only show 2 digits
#      cex = 0.8,
#      id.size = 1)


# Test for significance in results:
anova.cca(rda(dat_train$log_R2_1, H1_data)) # sign. p = 0.001
anova.cca(rda(dat_train$log_R2_1, H2_data)) # sign. p = 0.001
anova.cca(rda(dat_train$log_R2_1, H3_data)) # sign. p = 0.001
anova.cca(rda(dat_train$log_R2_1, H4_data)) # sign. p = 0.001

```

## Log Ratio - Sampling Period 2

```{r}
#| label: var-part-vegan-LR2
#| message: FALSE
#| warning: FALSE
#| error: FALSE

dat_train <- dat_train_LR2
# Create a data frame for each set of variables
H1_data <- dat_train %>% select(any_of(H1_vars))
H2_data <- dat_train %>% select(any_of(H2_vars))
H3_data <- dat_train %>% select(any_of(H3_vars))
H4_data <- dat_train %>% select(any_of(H4_vars))

# Perform basic variation partitioning (vegan package)
varpart_model4 <- varpart(dat_train$log_R2_1, H1_data, H2_data, H3_data, H4_data)


## VENN-diagram
plot(varpart_model4,
     Xnames = c("Species Traits", "Species Range Geometry", "Diversity", "Atlas characteristics"), # name the partitions
     bg = c("seagreen3", "mediumpurple", "darkorange", "gold"), alpha = 80, # colour the circles
     digits = 2, # only show 2 digits
     cex = 0.8,
     id.size = 1)


# Test for significance in results:
anova.cca(rda(dat_train$log_R2_1, H1_data)) # sign. p = 0.001
anova.cca(rda(dat_train$log_R2_1, H2_data)) # sign. p = 0.001
anova.cca(rda(dat_train$log_R2_1, H3_data)) # sign. p = 0.001
anova.cca(rda(dat_train$log_R2_1, H4_data)) # sign. p = 0.001

```
:::

::: panel-tabset
## Jaccard - Sampling Period 1
run time at server: ca. 30 min

```{r}
#| label: var-part-rf-J1
#| eval: FALSE

index_list <- list(indices_J1, indices_J2, indices_LR1, indices_LR2)
dat_train_list <- list(dat_train_J1, dat_train_J2, dat_train_LR1, dat_train_LR2)

dat_train <- dat_train_J1

trainControl <- trainControl(
    method = "repeatedcv",
    number = 10,
    repeats = 3,
    savePredictions = "final",
    returnResamp = "final",
    verboseIter = TRUE,
    index = indices_J1)

tictoc::tic("ranger full model")
set.seed(42)
full_ranger <- train(
    Jaccard ~ .,
    data = dat_train,
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


# Train ranger model
tictoc::tic("ranger H1")
set.seed(42)
H1_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(H1_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


tictoc::tic("ranger H2")
set.seed(42)
H2_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(H2_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


tictoc::tic("ranger H3")
set.seed(42)
H3_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(H3_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()

tictoc::tic("ranger H4")
set.seed(42)
H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(H4_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


### combinations of 2 hypotheses:

set.seed(42)
H1H2_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H3_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


set.seed(42)
H2H3_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


set.seed(42)
H2H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H2_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H3H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H3_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


### combinations of 3 hypotheses together =====

set.seed(42)
H1H2H3_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H2H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H3H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H3_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H2H3H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

J1_varPart_ranger_list <- list(
    full_ranger, H1_ranger, H2_ranger, H3_ranger, H4_ranger, 
    H1H2_ranger, H1H3_ranger, H1H4_ranger, 
    H2H3_ranger, H2H4_ranger, 
    H3H4_ranger, 
    H1H2H3_ranger, H1H2H4_ranger, H1H3H4_ranger, 
    H2H3H4_ranger)
saveRDS(J1_varPart_ranger_list, "../data/J1_varPart_list.rds")

```

```{r}
#| label: var-part-ranger-performance-eval-J1
#| message: FALSE
#| warning: FALSE
#| error: FALSE

# ===== Performance eval ======= #
performances <- replicate(4, list())
dat_test <- dat_test_J1
# Predict on your test data
predictions_full <- predict(J1_varPart_ranger_list[[1]], newdata = dat_test)

predictions_H1 <- predict(J1_varPart_ranger_list[[2]], newdata = dat_test)
predictions_H2 <- predict(J1_varPart_ranger_list[[3]], newdata = dat_test)
predictions_H3 <- predict(J1_varPart_ranger_list[[4]], newdata = dat_test)
predictions_H4 <- predict(J1_varPart_ranger_list[[5]], newdata = dat_test)

predictions_H1H2 <- predict(J1_varPart_ranger_list[[6]], newdata = dat_test)
predictions_H1H3 <- predict(J1_varPart_ranger_list[[7]], newdata = dat_test)
predictions_H1H4 <- predict(J1_varPart_ranger_list[[8]], newdata = dat_test)
predictions_H2H3 <- predict(J1_varPart_ranger_list[[9]], newdata = dat_test)
predictions_H2H4 <- predict(J1_varPart_ranger_list[[10]], newdata = dat_test)
predictions_H3H4 <- predict(J1_varPart_ranger_list[[11]], newdata = dat_test)

predictions_H1H2H3 <- predict(J1_varPart_ranger_list[[12]], newdata = dat_test)
predictions_H1H2H4 <- predict(J1_varPart_ranger_list[[13]], newdata = dat_test)
predictions_H1H3H4 <- predict(J1_varPart_ranger_list[[14]], newdata = dat_test)
predictions_H2H3H4 <- predict(J1_varPart_ranger_list[[15]], newdata = dat_test)

# Calculate the performance metrics
perf1 <- rbind(postResample(pred = predictions_full, obs = dat_test$Jaccard),
              postResample(pred = predictions_H1, obs = dat_test$Jaccard),
              postResample(pred = predictions_H2, obs = dat_test$Jaccard),
              postResample(pred = predictions_H3, obs = dat_test$Jaccard),
              postResample(pred = predictions_H4, obs = dat_test$Jaccard),
              
              postResample(pred = predictions_H1H2, obs = dat_test$Jaccard),
              postResample(pred = predictions_H1H3, obs = dat_test$Jaccard),
              postResample(pred = predictions_H1H4, obs = dat_test$Jaccard),
              postResample(pred = predictions_H2H3, obs = dat_test$Jaccard),
              postResample(pred = predictions_H2H4, obs = dat_test$Jaccard),
              postResample(pred = predictions_H3H4, obs = dat_test$Jaccard),
              
              postResample(pred = predictions_H1H2H3, obs = dat_test$Jaccard),
              postResample(pred = predictions_H1H2H4, obs = dat_test$Jaccard),
              postResample(pred = predictions_H1H3H4, obs = dat_test$Jaccard),
              postResample(pred = predictions_H2H3H4, obs = dat_test$Jaccard)) %>% 
                as.data.frame() %>% 
                round(4)

model <- c("full", 
            seq(1:4), 
            "H1H2", "H1H3", "H1H4", "H2H3", "H2H4", "H3H4", 
            "H1H2H3", "H1H2H4", "H1H3H4", "H2H3H4")
perf1$model <- model
perf1$subset <- "J1"

# Print the performance metrics

perf1 %>% 
    kableExtra::kable()
perf1 %>% 
    kableExtra::kable() %>% 
    write.csv("../data/performance_varExpl_rf_J1.csv")

performances[[1]] <- list(
    J1 = slice_min(perf1, RMSE) %>% 
    slice_max(Rsquared))


# Create a bar plot of variance explained
ggplot(perf1, aes(x = reorder(model, RMSE), y = Rsquared)) +
  geom_bar(stat = "identity") +
  labs(x = "Model", y = "Variance Explained") +
  theme_minimal()

```

## Jaccard - Sampling period 2

```{r}
#| label: var-part-rf-J2
#| eval: FALSE
dat_train <- dat_train_J2

trainControl <- trainControl(
    method = "repeatedcv",
    number = 10,
    repeats = 3,
    savePredictions = "final",
    returnResamp = "final",
    verboseIter = TRUE,
    index = indices_J2)

tictoc::tic("ranger full model")
set.seed(42)
full_ranger <- train(
    Jaccard ~ .,
    data = dat_train,
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


# Train ranger model
tictoc::tic("ranger H1")
set.seed(42)
H1_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(H1_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


tictoc::tic("ranger H2")
set.seed(42)
H2_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(H2_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


tictoc::tic("ranger H3")
set.seed(42)
H3_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(H3_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()

tictoc::tic("ranger H4")
set.seed(42)
H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(H4_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


### combinations of 2 hypotheses:

set.seed(42)
H1H2_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H3_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


set.seed(42)
H2H3_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


set.seed(42)
H2H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H2_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H3H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H3_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


### combinations of 3 hypotheses together =====

set.seed(42)
H1H2H3_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H2H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H3H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H3_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H2H3H4_ranger <- train(
    Jaccard ~ .,
    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

J2_varPart_ranger_list <- list(
    full_ranger, H1_ranger, H2_ranger, H3_ranger, H4_ranger, 
    H1H2_ranger, H1H3_ranger, H1H4_ranger, 
    H2H3_ranger, H2H4_ranger, 
    H3H4_ranger, 
    H1H2H3_ranger, H1H2H4_ranger, H1H3H4_ranger, 
    H2H3H4_ranger)
saveRDS(J2_varPart_ranger_list, "../data/J2_varPart_list.rds")

```

```{r}
#| label: var-part-ranger-performance-eval-J2
# ===== Performance eval ======= #
dat_test <- dat_test_J2

# Predict on your test data
predictions_full <- predict(J2_varPart_ranger_list[[1]], newdata = dat_test)

predictions_H1 <- predict(J2_varPart_ranger_list[[2]], newdata = dat_test)
predictions_H2 <- predict(J2_varPart_ranger_list[[3]], newdata = dat_test)
predictions_H3 <- predict(J2_varPart_ranger_list[[4]], newdata = dat_test)
predictions_H4 <- predict(J2_varPart_ranger_list[[5]], newdata = dat_test)

predictions_H1H2 <- predict(J2_varPart_ranger_list[[6]], newdata = dat_test)
predictions_H1H3 <- predict(J2_varPart_ranger_list[[7]], newdata = dat_test)
predictions_H1H4 <- predict(J2_varPart_ranger_list[[8]], newdata = dat_test)
predictions_H2H3 <- predict(J2_varPart_ranger_list[[9]], newdata = dat_test)
predictions_H2H4 <- predict(J2_varPart_ranger_list[[10]], newdata = dat_test)
predictions_H3H4 <- predict(J2_varPart_ranger_list[[11]], newdata = dat_test)

predictions_H1H2H3 <- predict(J2_varPart_ranger_list[[12]], newdata = dat_test)
predictions_H1H2H4 <- predict(J2_varPart_ranger_list[[13]], newdata = dat_test)
predictions_H1H3H4 <- predict(J2_varPart_ranger_list[[14]], newdata = dat_test)
predictions_H2H3H4 <- predict(J2_varPart_ranger_list[[15]], newdata = dat_test)

# Calculate the performance metrics
perf2 <- rbind(postResample(pred = predictions_full, obs = dat_test$Jaccard),
              postResample(pred = predictions_H1, obs = dat_test$Jaccard),
              postResample(pred = predictions_H2, obs = dat_test$Jaccard),
              postResample(pred = predictions_H3, obs = dat_test$Jaccard),
              postResample(pred = predictions_H4, obs = dat_test$Jaccard),
              
              postResample(pred = predictions_H1H2, obs = dat_test$Jaccard),
              postResample(pred = predictions_H1H3, obs = dat_test$Jaccard),
              postResample(pred = predictions_H1H4, obs = dat_test$Jaccard),
              postResample(pred = predictions_H2H3, obs = dat_test$Jaccard),
              postResample(pred = predictions_H2H4, obs = dat_test$Jaccard),
              postResample(pred = predictions_H3H4, obs = dat_test$Jaccard),
              
              postResample(pred = predictions_H1H2H3, obs = dat_test$Jaccard),
              postResample(pred = predictions_H1H2H4, obs = dat_test$Jaccard),
              postResample(pred = predictions_H1H3H4, obs = dat_test$Jaccard),
              postResample(pred = predictions_H2H3H4, obs = dat_test$Jaccard)) %>% 
                as.data.frame() %>% 
                round(4)

model <- c("full", 
            seq(1:4), 
            "H1H2", "H1H3", "H1H4", "H2H3", "H2H4", "H3H4", 
            "H1H2H3", "H1H2H4", "H1H3H4", "H2H3H4")
perf2$model <- model
perf2$subset <- "J2"
# Print the performance metrics
performances[[2]] <- list(
    J2 = slice_min(perf2, RMSE) %>% 
    slice_max(Rsquared))

perf2 %>% 
    kableExtra::kable()
perf2 %>% 
    kableExtra::kable() %>% 
    write.csv("../data/performance_varExpl_rf_J2.csv")

# Create a bar plot of variance explained
ggplot(perf2, aes(x = reorder(model, RMSE), y = Rsquared)) +
  geom_bar(stat = "identity") +
  labs(x = "Model", y = "Variance Explained") +
  theme_minimal()

```

## Log Ratio - Sampling period 1

```{r}
#| label: var-part-rf-LR1
#| eval: FALSE
dat_train <- dat_train_LR1

trainControl <- trainControl(
    method = "repeatedcv",
    number = 10,
    repeats = 3,
    savePredictions = "final",
    returnResamp = "final",
    verboseIter = TRUE,
    index = indices_LR1)

tictoc::tic("ranger full model")
set.seed(42)
full_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train,
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


# Train ranger model
tictoc::tic("ranger H1")
set.seed(42)
H1_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(H1_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


tictoc::tic("ranger H2")
set.seed(42)
H2_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(H2_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


tictoc::tic("ranger H3")
set.seed(42)
H3_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(H3_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()

tictoc::tic("ranger H4")
set.seed(42)
H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(H4_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


### combinations of 2 hypotheses:

set.seed(42)
H1H2_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H3_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


set.seed(42)
H2H3_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


set.seed(42)
H2H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H2_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H3H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H3_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


### combinations of 3 hypotheses together =====

set.seed(42)
H1H2H3_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H2H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H3H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H3_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H2H3H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

LR1_varPart_ranger_list <- list(
    full_ranger, H1_ranger, H2_ranger, H3_ranger, H4_ranger, 
    H1H2_ranger, H1H3_ranger, H1H4_ranger, 
    H2H3_ranger, H2H4_ranger, 
    H3H4_ranger, 
    H1H2H3_ranger, H1H2H4_ranger, H1H3H4_ranger, 
    H2H3H4_ranger)
saveRDS(LR1_varPart_ranger_list, "../data/LR1_varPart_list.rds")

```

```{r}
#| label: var-part-ranger-performance-eval-LR1
# ===== Performance eval ======= #
dat_test <- dat_test_LR1

# Predict on your test data
predictions_full <- predict(LR1_varPart_ranger_list[[1]], newdata = dat_test)

predictions_H1 <- predict(LR1_varPart_ranger_list[[2]], newdata = dat_test)
predictions_H2 <- predict(LR1_varPart_ranger_list[[3]], newdata = dat_test)
predictions_H3 <- predict(LR1_varPart_ranger_list[[4]], newdata = dat_test)
predictions_H4 <- predict(LR1_varPart_ranger_list[[5]], newdata = dat_test)

predictions_H1H2 <- predict(LR1_varPart_ranger_list[[6]], newdata = dat_test)
predictions_H1H3 <- predict(LR1_varPart_ranger_list[[7]], newdata = dat_test)
predictions_H1H4 <- predict(LR1_varPart_ranger_list[[8]], newdata = dat_test)
predictions_H2H3 <- predict(LR1_varPart_ranger_list[[9]], newdata = dat_test)
predictions_H2H4 <- predict(LR1_varPart_ranger_list[[10]], newdata = dat_test)
predictions_H3H4 <- predict(LR1_varPart_ranger_list[[11]], newdata = dat_test)

predictions_H1H2H3 <- predict(LR1_varPart_ranger_list[[12]], newdata = dat_test)
predictions_H1H2H4 <- predict(LR1_varPart_ranger_list[[13]], newdata = dat_test)
predictions_H1H3H4 <- predict(LR1_varPart_ranger_list[[14]], newdata = dat_test)
predictions_H2H3H4 <- predict(LR1_varPart_ranger_list[[15]], newdata = dat_test)

# Calculate the performance metrics
perf3 <- rbind(postResample(pred = predictions_full, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H1, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H2, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H3, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H4, obs = dat_test$log_R2_1),
              
              postResample(pred = predictions_H1H2, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H1H3, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H1H4, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H2H3, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H2H4, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H3H4, obs = dat_test$log_R2_1),
              
              postResample(pred = predictions_H1H2H3, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H1H2H4, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H1H3H4, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H2H3H4, obs = dat_test$log_R2_1)) %>% 
                as.data.frame() %>% 
                round(4)

model <- c("full", 
            seq(1:4), 
            "H1H2", "H1H3", "H1H4", "H2H3", "H2H4", "H3H4", 
            "H1H2H3", "H1H2H4", "H1H3H4", "H2H3H4")
perf3$model <- model
perf3$subset <- "LR1"
# Print the performance metrics
performances[[3]] <- list(
    LR1 = slice_min(perf3, RMSE) %>% 
    slice_max(Rsquared))

# Print the performance metrics

perf3 %>% 
    kableExtra::kable()
perf3 %>% 
    kableExtra::kable() %>% 
    write.csv("../data/performance_varExpl_rf_LR1.csv")


 # Create a bar plot of variance explained
ggplot(perf3, aes(x = reorder(model, RMSE), y = Rsquared)) +
  geom_bar(stat = "identity") +
  labs(x = "Model", y = "Variance Explained") +
  theme_minimal()

```

## Log Ratio - Sampling period 2

```{r}
#| label: var-part-rf-LR2
#| eval: FALSE
dat_train <- dat_train_LR2

trainControl <- trainControl(
    method = "repeatedcv",
    number = 10,
    repeats = 3,
    savePredictions = "final",
    returnResamp = "final",
    verboseIter = TRUE,
    index = indices_LR2)

tictoc::tic("ranger full model")
set.seed(42)
full_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train,
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


# Train ranger model
tictoc::tic("ranger H1")
set.seed(42)
H1_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(H1_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


tictoc::tic("ranger H2")
set.seed(42)
H2_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(H2_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


tictoc::tic("ranger H3")
set.seed(42)
H3_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(H3_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()

tictoc::tic("ranger H4")
set.seed(42)
H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(H4_vars)),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)
tictoc::toc()


### combinations of 2 hypotheses:

set.seed(42)
H1H2_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H3_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


set.seed(42)
H2H3_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


set.seed(42)
H2H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H2_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H3H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H3_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)


### combinations of 3 hypotheses together =====

set.seed(42)
H1H2H3_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H2H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H1H3H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H3_vars, H4_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

set.seed(42)
H2H3H4_ranger <- train(
    log_R2_1 ~ .,
    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H3_vars))),
    method = "ranger",
    trControl = trainControl,
    importance = "permutation",
    scale.permutation.importance = TRUE,
    num.trees = 5000,
    respect.unordered.factors = TRUE,
    oob.error = TRUE,
    tuneLength = 5)

LR2_varPart_ranger_list <- list(
    full_ranger, H1_ranger, H2_ranger, H3_ranger, H4_ranger, 
    H1H2_ranger, H1H3_ranger, H1H4_ranger, 
    H2H3_ranger, H2H4_ranger, 
    H3H4_ranger, 
    H1H2H3_ranger, H1H2H4_ranger, H1H3H4_ranger, 
    H2H3H4_ranger)
saveRDS(LR2_varPart_ranger_list, "../data/LR2_varPart_list.rds")

```

```{r}
#| label: var-part-ranger-performance-eval-LR2
# ===== Performance eval ======= #
dat_test <- dat_test_LR2
# Predict on your test data
predictions_full <- predict(LR2_varPart_ranger_list[[1]], newdata = dat_test)

predictions_H1 <- predict(LR2_varPart_ranger_list[[2]], newdata = dat_test)
predictions_H2 <- predict(LR2_varPart_ranger_list[[3]], newdata = dat_test)
predictions_H3 <- predict(LR2_varPart_ranger_list[[4]], newdata = dat_test)
predictions_H4 <- predict(LR2_varPart_ranger_list[[5]], newdata = dat_test)

predictions_H1H2 <- predict(LR2_varPart_ranger_list[[6]], newdata = dat_test)
predictions_H1H3 <- predict(LR2_varPart_ranger_list[[7]], newdata = dat_test)
predictions_H1H4 <- predict(LR2_varPart_ranger_list[[8]], newdata = dat_test)
predictions_H2H3 <- predict(LR2_varPart_ranger_list[[9]], newdata = dat_test)
predictions_H2H4 <- predict(LR2_varPart_ranger_list[[10]], newdata = dat_test)
predictions_H3H4 <- predict(LR2_varPart_ranger_list[[11]], newdata = dat_test)

predictions_H1H2H3 <- predict(LR2_varPart_ranger_list[[12]], newdata = dat_test)
predictions_H1H2H4 <- predict(LR2_varPart_ranger_list[[13]], newdata = dat_test)
predictions_H1H3H4 <- predict(LR2_varPart_ranger_list[[14]], newdata = dat_test)
predictions_H2H3H4 <- predict(LR2_varPart_ranger_list[[15]], newdata = dat_test)

# Calculate the performance metrics
perf4 <- rbind(postResample(pred = predictions_full, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H1, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H2, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H3, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H4, obs = dat_test$log_R2_1),
              
              postResample(pred = predictions_H1H2, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H1H3, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H1H4, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H2H3, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H2H4, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H3H4, obs = dat_test$log_R2_1),
              
              postResample(pred = predictions_H1H2H3, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H1H2H4, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H1H3H4, obs = dat_test$log_R2_1),
              postResample(pred = predictions_H2H3H4, obs = dat_test$log_R2_1)) %>% 
                as.data.frame() %>% 
                round(4)

model <- c("full", 
            seq(1:4), 
            "H1H2", "H1H3", "H1H4", "H2H3", "H2H4", "H3H4", 
            "H1H2H3", "H1H2H4", "H1H3H4", "H2H3H4")
perf4$model <- model

# Print the performance metrics

perf4 %>% 
    kableExtra::kable()
perf4 %>% 
    kableExtra::kable() %>% 
    write.csv("../data/performance_varExpl_rf_LR2.csv")

perf4$subset <- "LR2"
# Print the performance metrics
performances[[4]] <- list(
    LR2 = slice_min(perf4, RMSE) %>% 
    slice_max(Rsquared))



# Create a bar plot of variance explained
ggplot(perf4, aes(x = reorder(model, RMSE), y = Rsquared)) +
  geom_bar(stat = "identity") +
  labs(x = "Model", y = "Variance Explained") +
  theme_minimal()

```
:::

```{r}
do.call(rbind, unlist(performances, recursive = F)) %>% kableExtra::kable()
# save.image("../data/RData/04_VarPart.RData")
```
