{"title":"Script 3 - Hyperparameter Tuning","markdown":{"yaml":{"title":"Script 3 - Hyperparameter Tuning","author":[{"name":"MSc. Friederike Johanna Rosa WÃ¶lke","orcid":"0000-0001-9034-4883","url":"https://friedarosa.github.io","email":"wolke@fzp.czu.cz","corresponding":true}],"date":"2023-05-29"},"headingText":"Source custom functions","containsRefs":false,"markdown":"\n\n::: panel-tabset\n\n```{r}\n#| label: load-packages\n#| message: false\n#| warning: false\nrm(list = ls())\nsource(\"src/functions.R\")\n\n```\n\n## MachineLearning packages\n\n```{r}\n#| label: load-ML-packages\n#| message: false\n#| error: false\n\npckgs <- c(\"dplyr\", \"ggplot2\", \"reshape2\", \n           \"caret\", \"caretEnsemble\", \n           \"randomForest\", \"ranger\", \"gbm\", \"xgboost\", \n           \"gridExtra\", \"kableExtra\")\n\n\ninstall_and_load(pckgs)\n```\n\n## Load RData/RDS objects to reduce computing time\n\n```{r}\n#| label: load-RData\n#| message: false\n#| error: false\n\n# Load workspace to save computing time:\nload(\"data/RData/03_reduced_hyper_para_tuning_all_models.RData\")\n\n# make list of models for evaluation ========\nsaved_models <- list(Jaccard1 = models_J1, \n                   Jaccard2 = models_J2, \n                   LogRatio1 = models_LR1, \n                   LogRatio2 = models_LR2)\n\n# saveRDS(saved_models, \"data/models/reducedModels/03_List_all_reduced_models.rds\")\n\n# List of variables to keep in each model\nreduced_predictors <- readRDS(\"data/rds/selected_predictors_list.rds\")\n\n\nH1_vars <- c(\n    \"sd_PC1\", \"sd_PC2\", # Climatic Niche Breadth\n    \"GlobRangeSize_m2\", \"IUCN\", \"Mass\", \"Habitat\", \"Habitat.Density\",\n    \"Migration\", \"Trophic.Level\", \"Trophic.Niche\", \"Primary.Lifestyle\",\n    \"FP\", # Phylogenetic Distinctness\n    \"Hand.Wing.Index\") # Measure of dispersal ability\nH2_vars <- c(\n    \"AOO\", \"rel_occ_Ncells\", \"mean_prob_cooccur\", \"D_AOO_a\", \n    \"moran\", \"x_intercept\", \"sp_centr_lon\", \"sp_centr_lat\",\n    \"lengthMinRect\", \"widthMinRect\", \"elonMinRect\", \"bearingMinRect\",\n    \"circ\", \"bearing\", \"Southernness\", \"Westernness\",\n    \"rel_maxDist\", \"rel_ewDist\", \"rel_nsDist\", \"rel_elonRatio\",\n    \"rel_relCirc\", \"rel_circNorm\", \"rel_lin\", \"Dist_centroid_to_COG\",\n    \"maxDist_toBorder_border\", \"maxDist_toBorder_centr\",\n    \"minDist_toBorder_centr\")\nH3_vars <- c(\"GammaSR\", \"AlphaSR_sp\", \"BetaSR_sp\")\nH4_vars <- c(\n    \"dataset\", \"mean_area\", \"Total_area_samp\", \"Total_Ncells_samp\",\n    \"mean_cell_length\", \"atlas_lengthMinRect\", \"atlas_widthMinRect\",\n    \"atlas_elonMinRect\", \"atlas_circ\", \"atlas_bearingMinRect\",\n    \"atlas_bearing\", \"AtlasCOG_long\", \"AtlasCOG_lat\")\n\n```\n:::\n\n### Individual models\n\n#### Hyperparameter tuning\n\n```{r}\n#| label: hyperparameter-tuning\n#| eval: false\n#| code-fold: true\n\nindex_list <- list(indices_J1, indices_J2, indices_LR1, indices_LR2)\ndat_train_list <- list(dat_train_J1, dat_train_J2, dat_train_LR1, dat_train_LR2)\n\nsaved_models <- replicate(4, list())\nnames(saved_models) <- c(\"J1\", \"J2\", \"LR1\", \"LR2\")\n\nresponse_list <- c(\"Jaccard\", \"Jaccard\", \"log_R2_1\", \"log_R2_1\")\n\nfor(j in c(1:4)){\n  ## Loop through differet datasets/Analyses\n  indices <- index_list[[j]]\n  response <- response_list[[j]] \n  predictors <- rownames(reduced_predictors[[j]])\n  \n  # Subset the data\n  dat_train <- dat_train_list[[j]] %>% \n                    select(any_of(c(response,predictors)))\n\n  \n  # Define training control ==========================================================\n  trainControl <- trainControl(\n    method = \"repeatedcv\",\n    number = 10,\n    repeats = 3,\n    savePredictions = \"final\",\n    returnResamp = \"all\",\n    verboseIter = FALSE,\n    index = indices)\n\n  ## Train ranger model ==========================================================\n  set.seed(42)\n  tictoc::tic(\"ranger\")\n  rangerModel_t <- train(\n    as.formula(paste(response, \"~ .\")),\n    data = dat_train,\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 20)\n  \n  saveRDS(rangerModel_t, paste0(\"data/models/reducedModels/03_reduced_rangerModel_\", response, j, \"all.rds\"))\n  tictoc::toc()\n  \n  # rangerModel_t <- readRDS( paste0(\"data/models/reducedModels/rangerModel_\", response, j, \"all.rds\"))\n\n  ### Model results:\n  p_rangerModel <- plot(rangerModel_t)\n  p_rangerModel\n  rangerModel_t$finalModel\n\n  ## Train xgbTree model ==========================================================\n  xgb_grid <- expand.grid(\n    nrounds = c(1000),\n    eta = c(0.1, 0.3),\n    max_depth = c(2,3, 5),\n    gamma = c(0, 0.01, 0.1),\n    colsample_bytree = 0.6,\n    min_child_weight = 1,\n    subsample =1)\n  \n  tictoc::tic(\"xgb\")\n  set.seed(42)\n  xgbModel_t <- train(\n    as.formula(paste(response, \"~ .\")),\n    data = dat_train,\n    method = \"xgbTree\",\n    trControl = trainControl,\n    tuneGrid = xgb_grid)\n  saveRDS(xgbModel_t, paste0(\"data/models/reducedModels/03_reduced_xgbModel_all_\", response, j, \"TLCUSTOM.rds\"))\n  tictoc::toc()\n  \n  # xgbModel_t <- readRDS(paste0(\"data/models/reducedModels/xgbModel_all_\", response, j, \"TLCUSTOM.rds\"))\n\n  ### Model results:\n  p_xgbModel <- plot(xgbModel_t)\n  p_xgbModel\n  slice_min(xgbModel_t$results, RMSE)\n  slice_max(xgbModel_t$results, Rsquared)\n\n  \n  ## Train gbm model ==========================================================\n  set.seed(42)\n  tictoc::tic(\"gbm\")\n  gbmModel_t <- train(\n    as.formula(paste(response, \"~ .\")),\n    data = dat_train,\n    method = \"gbm\",\n    trControl = trainControl,\n    tuneLength= 20,\n    verbose = FALSE)\n  saveRDS(gbmModel_t, paste0(\"data/models/reducedModels/03_reduced_gbmModel_\", response, j, \"all.rds\"))\n  tictoc::toc()\n\n  ### Model results:\n  summary.gbm(gbmModel_t$finalModel)\n  p_gbmModel <- plot(gbmModel_t)\n  p_gbmModel\n  gbmModel_t$finalModel\n  slice_min(gbmModel_t$results, RMSE)\n  slice_max(gbmModel_t$results, Rsquared)\n  \n  saved_models[[j]] <- list(rangerModel_t, xgbModel_t, gbmModel_t)\n}\n\n# saveRDS(saved_models, \"data/models/reducedModels/03_List_all_reduced_models.rds\")\n# save.image(\"data/RData/03_reduced_hyper_para_tuning.RData\")\n\n```\n\n#### Model Evaluation\nHere we will extract the model performance, best hyperparameters and variable importances from each model and compare them.\n\n::: panel-tabset\n## Jaccard 1\n\n```{r}\n# reduced predictor models:\n\nranger_red <- saved_models[[1]][[1]]\nxgb_red <- saved_models[[1]][[2]]\ngbm_red <- saved_models[[1]][[3]]\n\n## Ranger =====\nranger_red$finalModel\nranger_red$results\nplot(ranger_red)\n\n\n## XGB ======\nplot(xgb_red)\nxgb_red\n\n\n## GBM =====\ngbm_red$finalModel\ngbm_red\n\nmodels_J1 <- list(ranger = ranger_red, \n                  xgb = xgb_red,\n                  gbm = gbm_red)\n\n\n## Importance frame (wide format) ===\nimportances_wide <- cbind(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(var_ranger = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_ranger\" = \"Overall\"),\n  \n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Imp_gbm\" = \"rel.inf\"),\n  \n  varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_gbm\" = \"Overall\"))  %>% \n  kableExtra::kable()\n\n\n## Importance frame (long format for plotting) ===\nimportances_long_J1 <- full_join(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"ranger\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\"),\n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(variable = rownames(.),\n           model = \"gbm\") %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Importance\" = \"rel.inf\") %>% \n    select(variable, model, Importance)) %>% \n  full_join(varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"xgb\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\")) %>%\n  mutate(hypothesis = case_when(variable %in% H1_vars ~ \"H1\",\n                                variable %in% H2_vars ~ \"H2\",\n                                variable %in% H3_vars ~ \"H3\",\n                                variable %in% H4_vars ~ \"H4\",\n                                .default = \"H1\"))\n```\n\n## Jaccard 2\n\n```{r}\n#| eval: true\n# Jaccard 2\nranger_red <- saved_models[[2]][[1]]\nxgb_red <- saved_models[[2]][[2]]\ngbm_red <- saved_models[[2]][[3]]\n\n## Ranger =====\nranger_red$finalModel\nranger_red$results\nplot(ranger_red)\n\n\n## XGB ======\nplot(xgb_red)\nxgb_red\n\n\n## GBM =====\ngbm_red$finalModel\ngbm_red\n\nmodels_J2 <- list(ranger = ranger_red, \n                  xgb = xgb_red,\n                  gbm = gbm_red)\n\n\n\n\n\n\n## Importance frame (wide format) ===\nimportances_wide <- cbind(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(var_ranger = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_ranger\" = \"Overall\"),\n  \n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Imp_gbm\" = \"rel.inf\"),\n  \n  varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_gbm\" = \"Overall\"))  %>% \n  kableExtra::kable()\n\n\n## Importance frame (long format for plotting) ===\nimportances_long_J2 <- full_join(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"ranger\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\"),\n  \n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(variable = rownames(.),\n           model = \"gbm\") %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Importance\" = \"rel.inf\") %>% \n    select(variable, model, Importance)) %>% \n  \n  full_join(varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"xgb\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\")) %>%\n  mutate(hypothesis = case_when(variable %in% H1_vars ~ \"H1\",\n                                variable %in% H2_vars ~ \"H2\",\n                                variable %in% H3_vars ~ \"H3\",\n                                variable %in% H4_vars ~ \"H4\",\n                                .default = \"H1\"))\n\n\n```\n\n## Log Ratio 1\n\n```{r}\n## reduced:\nranger_red <- saved_models[[3]][[1]]\nxgb_red <- saved_models[[3]][[2]]\ngbm_red <- saved_models[[3]][[3]]\n\n## Ranger =====\nranger_red$finalModel\nranger_red$results\nplot(ranger_red)\n\n\n## XGB ======\nplot(xgb_red)\nxgb_red\n\n\n## GBM =====\ngbm_red$finalModel\ngbm_red\n\nmodels_LR1 <- list(ranger = ranger_red, \n                  xgb = xgb_red,\n                  gbm = gbm_red)\n\n\n\n\n\n\n## Importance frame (wide format) ===\nimportance_wide <- cbind(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(var_ranger = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_ranger\" = \"Overall\"),\n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Imp_gbm\" = \"rel.inf\"),\n  varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_gbm\" = \"Overall\"))  %>% \n  kableExtra::kable()\n\n\n## Importance frame (long format for plotting) ===\nimportances_long_LR1 <- full_join(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"ranger\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\"),\n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(variable = rownames(.),\n           model = \"gbm\") %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Importance\" = \"rel.inf\") %>% \n    select(variable, model, Importance)) %>% \n  full_join(varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"xgb\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\")) %>%\n  mutate(hypothesis = case_when(variable %in% H1_vars ~ \"H1\",\n                                variable %in% H2_vars ~ \"H2\",\n                                variable %in% H3_vars ~ \"H3\",\n                                variable %in% H4_vars ~ \"H4\",\n                                .default = \"H1\"))\n\n```\n\n## Log Ratio 2\n\n```{r}\n## reduced:\nranger_red <- saved_models[[4]][[1]]\nxgb_red <- saved_models[[4]][[2]]\ngbm_red <- saved_models[[4]][[3]]\n\n## Ranger =====\nranger_red$finalModel\nranger_red$results\nplot(ranger_red)\n\n\n## XGB ======\nplot(xgb_red)\nxgb_red\n\n\n## GBM =====\ngbm_red$finalModel\ngbm_red\n\nmodels_LR2 <- list(ranger = ranger_red, \n                  xgb = xgb_red,\n                  gbm = gbm_red)\n\n\n\n\n## Importance frame (wide format) ===\nimportance_wide <- cbind(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(var_ranger = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_ranger\" = \"Overall\"),\n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Imp_gbm\" = \"rel.inf\"),\n  varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_gbm\" = \"Overall\")\n)  %>% kableExtra::kable()\n\n\n## Importance frame (long format for plotting) ===\nimportances_long_LR2 <- full_join(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"ranger\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\"),\n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(variable = rownames(.),\n           model = \"gbm\") %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Importance\" = \"rel.inf\") %>% \n    select(variable, model, Importance)) %>% \n  full_join(varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"xgb\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\")) %>%\n  mutate(hypothesis = case_when(variable %in% H1_vars ~ \"H1\",\n                                variable %in% H2_vars ~ \"H2\",\n                                variable %in% H3_vars ~ \"H3\",\n                                variable %in% H4_vars ~ \"H4\",\n                                .default = \"H1\"))\n\n\n\n```\n:::\n\n### Variable Importances across models\n::: panel-tabset\n## Jaccard 1\n```{r}\n\n# Plot variable importances across models:\nggplot(data = importances_long_J1, \n       aes(y = variable, x = Importance, fill = hypothesis))+\n  geom_col()+\n  facet_grid(~model, scales = \"free\")+\n  theme_classic()+\n  scale_fill_manual(values = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"))\n```\n## Jaccard 2\n```{r}\n\n# Plot variable importances across models:\nggplot(data = importances_long_J2, \n       aes(y = variable, x = Importance, fill = hypothesis))+\n  geom_col()+\n  facet_grid(~model, scales = \"free\")+\n  theme_classic()+\n  scale_fill_manual(values = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"))\n```\n\n## Log Ratio 1\n```{r}\n# Plot variable importances across models:\nggplot(data = importances_long_LR1, \n       aes(y = variable, x = Importance, fill = hypothesis))+\n  geom_col()+\n  facet_grid(~model, scales = \"free\")+\n  theme_classic()+\n  scale_fill_manual(values = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"))\n```\n\n## Log Ratio 2\n```{r}\n# Plot variable importances across models:\nggplot(data = importances_long_LR2, \n       aes(y = variable, x = Importance, fill = hypothesis))+\n  geom_col()+\n  facet_grid(~model, scales = \"free\")+\n  theme_classic()+\n  scale_fill_manual(values = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"))\n```\n\n\n:::\n\n\n\n\n# Resamples across models:\n:::panel-tabset\n## Jaccard 1\n```{r}\n## Jaccard 1\n# Create resamples for each model\nresamps_J1 <- resamples(list(\n  ranger = models_J1[[1]],\n  xgb = models_J1[[2]],\n  gbm = models_J1[[3]]\n))\n\n# Plot the resampled error rates for each model\ndotplot_resamps_J1 <- dotplot(resamps_J1)\n\n# Summarize the resamples\nsummary_resamps_J1 <- summary(resamps_J1)\n```\n\n## Jaccard 2\n```{r}\n# Create resamples for each model\nresamps_J2 <- resamples(list(\n  ranger = models_J2[[1]],\n  xgb = models_J2[[2]],\n  gbm = models_J2[[3]]\n))\n\n# Plot the resampled error rates for each model\ndotplot_resamps_J2 <- dotplot(resamps_J2)\n\n# Summarize the resamples\nsummary_resamps_J2 <- summary(resamps_J2)\n```\n\n## Log Ratio 1\n```{r}\n# Create resamples for each model\nresamps_LR1 <- resamples(list(\n  ranger = models_LR1[[1]],\n  xgb = models_LR1[[2]],\n  gbm = models_LR1[[3]]\n))\n\n# Plot the resampled error rates for each model\ndotplot_resamps_LR1 <- dotplot(resamps_LR1)\n\n# Summarize the resamples\nsummary_resamps_LR1 <- summary(resamps_LR1)\n```\n\n## Log Ratio 2\n```{r}\n# Create resamples for each model\nresamps_LR2 <- resamples(list(\n  ranger = models_LR2[[1]],\n  xgb = models_LR2[[2]],\n  gbm = models_LR2[[3]]\n))\n\n# Plot the resampled error rates for each model\ndotplot_resamps_LR2 <- dotplot(resamps_LR2)\n\n# Summarize the resamples\nsummary_resamps_LR2 <- summary(resamps_LR2)\n```\n:::\n\n### Summary across all analyses\n```{r}\n#| code-fold: true\nresamples_all <- list(\n  Jaccard1 = list(\n    resamps_J1 = resamps_J1,\n    Dotplot = dotplot_resamps_J1, # store the dotplot object\n    Summary = summary_resamps_J1  # store the summary object\n  ),\n  Jaccard2 = list(\n    resamps_J2 = resamps_J2,\n    Dotplot = dotplot_resamps_J2, # store the dotplot object\n    Summary = summary_resamps_J2  # store the summary object\n  ),\n  LogRatio1 = list(\n    resamps_LR1 = resamps_LR1,\n    Dotplot = dotplot_resamps_LR1, # store the dotplot object\n    Summary = summary_resamps_LR1  # store the summary object\n  ),\n  LogRatio2 = list(\n    resamps_LR2 = resamps_LR2,\n    Dotplot = dotplot_resamps_LR2, # store the dotplot object\n    Summary = summary_resamps_LR2  # store the summary object\n))\n\n\nresamples_all\n\n\n# save.image(\"data/RData/03_reduced_hyper_para_tuning_all_models.RData\")\n```\n\n","srcMarkdownNoYaml":"\n\n::: panel-tabset\n## Source custom functions\n\n```{r}\n#| label: load-packages\n#| message: false\n#| warning: false\nrm(list = ls())\nsource(\"src/functions.R\")\n\n```\n\n## MachineLearning packages\n\n```{r}\n#| label: load-ML-packages\n#| message: false\n#| error: false\n\npckgs <- c(\"dplyr\", \"ggplot2\", \"reshape2\", \n           \"caret\", \"caretEnsemble\", \n           \"randomForest\", \"ranger\", \"gbm\", \"xgboost\", \n           \"gridExtra\", \"kableExtra\")\n\n\ninstall_and_load(pckgs)\n```\n\n## Load RData/RDS objects to reduce computing time\n\n```{r}\n#| label: load-RData\n#| message: false\n#| error: false\n\n# Load workspace to save computing time:\nload(\"data/RData/03_reduced_hyper_para_tuning_all_models.RData\")\n\n# make list of models for evaluation ========\nsaved_models <- list(Jaccard1 = models_J1, \n                   Jaccard2 = models_J2, \n                   LogRatio1 = models_LR1, \n                   LogRatio2 = models_LR2)\n\n# saveRDS(saved_models, \"data/models/reducedModels/03_List_all_reduced_models.rds\")\n\n# List of variables to keep in each model\nreduced_predictors <- readRDS(\"data/rds/selected_predictors_list.rds\")\n\n\nH1_vars <- c(\n    \"sd_PC1\", \"sd_PC2\", # Climatic Niche Breadth\n    \"GlobRangeSize_m2\", \"IUCN\", \"Mass\", \"Habitat\", \"Habitat.Density\",\n    \"Migration\", \"Trophic.Level\", \"Trophic.Niche\", \"Primary.Lifestyle\",\n    \"FP\", # Phylogenetic Distinctness\n    \"Hand.Wing.Index\") # Measure of dispersal ability\nH2_vars <- c(\n    \"AOO\", \"rel_occ_Ncells\", \"mean_prob_cooccur\", \"D_AOO_a\", \n    \"moran\", \"x_intercept\", \"sp_centr_lon\", \"sp_centr_lat\",\n    \"lengthMinRect\", \"widthMinRect\", \"elonMinRect\", \"bearingMinRect\",\n    \"circ\", \"bearing\", \"Southernness\", \"Westernness\",\n    \"rel_maxDist\", \"rel_ewDist\", \"rel_nsDist\", \"rel_elonRatio\",\n    \"rel_relCirc\", \"rel_circNorm\", \"rel_lin\", \"Dist_centroid_to_COG\",\n    \"maxDist_toBorder_border\", \"maxDist_toBorder_centr\",\n    \"minDist_toBorder_centr\")\nH3_vars <- c(\"GammaSR\", \"AlphaSR_sp\", \"BetaSR_sp\")\nH4_vars <- c(\n    \"dataset\", \"mean_area\", \"Total_area_samp\", \"Total_Ncells_samp\",\n    \"mean_cell_length\", \"atlas_lengthMinRect\", \"atlas_widthMinRect\",\n    \"atlas_elonMinRect\", \"atlas_circ\", \"atlas_bearingMinRect\",\n    \"atlas_bearing\", \"AtlasCOG_long\", \"AtlasCOG_lat\")\n\n```\n:::\n\n### Individual models\n\n#### Hyperparameter tuning\n\n```{r}\n#| label: hyperparameter-tuning\n#| eval: false\n#| code-fold: true\n\nindex_list <- list(indices_J1, indices_J2, indices_LR1, indices_LR2)\ndat_train_list <- list(dat_train_J1, dat_train_J2, dat_train_LR1, dat_train_LR2)\n\nsaved_models <- replicate(4, list())\nnames(saved_models) <- c(\"J1\", \"J2\", \"LR1\", \"LR2\")\n\nresponse_list <- c(\"Jaccard\", \"Jaccard\", \"log_R2_1\", \"log_R2_1\")\n\nfor(j in c(1:4)){\n  ## Loop through differet datasets/Analyses\n  indices <- index_list[[j]]\n  response <- response_list[[j]] \n  predictors <- rownames(reduced_predictors[[j]])\n  \n  # Subset the data\n  dat_train <- dat_train_list[[j]] %>% \n                    select(any_of(c(response,predictors)))\n\n  \n  # Define training control ==========================================================\n  trainControl <- trainControl(\n    method = \"repeatedcv\",\n    number = 10,\n    repeats = 3,\n    savePredictions = \"final\",\n    returnResamp = \"all\",\n    verboseIter = FALSE,\n    index = indices)\n\n  ## Train ranger model ==========================================================\n  set.seed(42)\n  tictoc::tic(\"ranger\")\n  rangerModel_t <- train(\n    as.formula(paste(response, \"~ .\")),\n    data = dat_train,\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 20)\n  \n  saveRDS(rangerModel_t, paste0(\"data/models/reducedModels/03_reduced_rangerModel_\", response, j, \"all.rds\"))\n  tictoc::toc()\n  \n  # rangerModel_t <- readRDS( paste0(\"data/models/reducedModels/rangerModel_\", response, j, \"all.rds\"))\n\n  ### Model results:\n  p_rangerModel <- plot(rangerModel_t)\n  p_rangerModel\n  rangerModel_t$finalModel\n\n  ## Train xgbTree model ==========================================================\n  xgb_grid <- expand.grid(\n    nrounds = c(1000),\n    eta = c(0.1, 0.3),\n    max_depth = c(2,3, 5),\n    gamma = c(0, 0.01, 0.1),\n    colsample_bytree = 0.6,\n    min_child_weight = 1,\n    subsample =1)\n  \n  tictoc::tic(\"xgb\")\n  set.seed(42)\n  xgbModel_t <- train(\n    as.formula(paste(response, \"~ .\")),\n    data = dat_train,\n    method = \"xgbTree\",\n    trControl = trainControl,\n    tuneGrid = xgb_grid)\n  saveRDS(xgbModel_t, paste0(\"data/models/reducedModels/03_reduced_xgbModel_all_\", response, j, \"TLCUSTOM.rds\"))\n  tictoc::toc()\n  \n  # xgbModel_t <- readRDS(paste0(\"data/models/reducedModels/xgbModel_all_\", response, j, \"TLCUSTOM.rds\"))\n\n  ### Model results:\n  p_xgbModel <- plot(xgbModel_t)\n  p_xgbModel\n  slice_min(xgbModel_t$results, RMSE)\n  slice_max(xgbModel_t$results, Rsquared)\n\n  \n  ## Train gbm model ==========================================================\n  set.seed(42)\n  tictoc::tic(\"gbm\")\n  gbmModel_t <- train(\n    as.formula(paste(response, \"~ .\")),\n    data = dat_train,\n    method = \"gbm\",\n    trControl = trainControl,\n    tuneLength= 20,\n    verbose = FALSE)\n  saveRDS(gbmModel_t, paste0(\"data/models/reducedModels/03_reduced_gbmModel_\", response, j, \"all.rds\"))\n  tictoc::toc()\n\n  ### Model results:\n  summary.gbm(gbmModel_t$finalModel)\n  p_gbmModel <- plot(gbmModel_t)\n  p_gbmModel\n  gbmModel_t$finalModel\n  slice_min(gbmModel_t$results, RMSE)\n  slice_max(gbmModel_t$results, Rsquared)\n  \n  saved_models[[j]] <- list(rangerModel_t, xgbModel_t, gbmModel_t)\n}\n\n# saveRDS(saved_models, \"data/models/reducedModels/03_List_all_reduced_models.rds\")\n# save.image(\"data/RData/03_reduced_hyper_para_tuning.RData\")\n\n```\n\n#### Model Evaluation\nHere we will extract the model performance, best hyperparameters and variable importances from each model and compare them.\n\n::: panel-tabset\n## Jaccard 1\n\n```{r}\n# reduced predictor models:\n\nranger_red <- saved_models[[1]][[1]]\nxgb_red <- saved_models[[1]][[2]]\ngbm_red <- saved_models[[1]][[3]]\n\n## Ranger =====\nranger_red$finalModel\nranger_red$results\nplot(ranger_red)\n\n\n## XGB ======\nplot(xgb_red)\nxgb_red\n\n\n## GBM =====\ngbm_red$finalModel\ngbm_red\n\nmodels_J1 <- list(ranger = ranger_red, \n                  xgb = xgb_red,\n                  gbm = gbm_red)\n\n\n## Importance frame (wide format) ===\nimportances_wide <- cbind(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(var_ranger = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_ranger\" = \"Overall\"),\n  \n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Imp_gbm\" = \"rel.inf\"),\n  \n  varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_gbm\" = \"Overall\"))  %>% \n  kableExtra::kable()\n\n\n## Importance frame (long format for plotting) ===\nimportances_long_J1 <- full_join(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"ranger\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\"),\n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(variable = rownames(.),\n           model = \"gbm\") %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Importance\" = \"rel.inf\") %>% \n    select(variable, model, Importance)) %>% \n  full_join(varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"xgb\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\")) %>%\n  mutate(hypothesis = case_when(variable %in% H1_vars ~ \"H1\",\n                                variable %in% H2_vars ~ \"H2\",\n                                variable %in% H3_vars ~ \"H3\",\n                                variable %in% H4_vars ~ \"H4\",\n                                .default = \"H1\"))\n```\n\n## Jaccard 2\n\n```{r}\n#| eval: true\n# Jaccard 2\nranger_red <- saved_models[[2]][[1]]\nxgb_red <- saved_models[[2]][[2]]\ngbm_red <- saved_models[[2]][[3]]\n\n## Ranger =====\nranger_red$finalModel\nranger_red$results\nplot(ranger_red)\n\n\n## XGB ======\nplot(xgb_red)\nxgb_red\n\n\n## GBM =====\ngbm_red$finalModel\ngbm_red\n\nmodels_J2 <- list(ranger = ranger_red, \n                  xgb = xgb_red,\n                  gbm = gbm_red)\n\n\n\n\n\n\n## Importance frame (wide format) ===\nimportances_wide <- cbind(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(var_ranger = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_ranger\" = \"Overall\"),\n  \n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Imp_gbm\" = \"rel.inf\"),\n  \n  varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_gbm\" = \"Overall\"))  %>% \n  kableExtra::kable()\n\n\n## Importance frame (long format for plotting) ===\nimportances_long_J2 <- full_join(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"ranger\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\"),\n  \n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(variable = rownames(.),\n           model = \"gbm\") %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Importance\" = \"rel.inf\") %>% \n    select(variable, model, Importance)) %>% \n  \n  full_join(varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"xgb\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\")) %>%\n  mutate(hypothesis = case_when(variable %in% H1_vars ~ \"H1\",\n                                variable %in% H2_vars ~ \"H2\",\n                                variable %in% H3_vars ~ \"H3\",\n                                variable %in% H4_vars ~ \"H4\",\n                                .default = \"H1\"))\n\n\n```\n\n## Log Ratio 1\n\n```{r}\n## reduced:\nranger_red <- saved_models[[3]][[1]]\nxgb_red <- saved_models[[3]][[2]]\ngbm_red <- saved_models[[3]][[3]]\n\n## Ranger =====\nranger_red$finalModel\nranger_red$results\nplot(ranger_red)\n\n\n## XGB ======\nplot(xgb_red)\nxgb_red\n\n\n## GBM =====\ngbm_red$finalModel\ngbm_red\n\nmodels_LR1 <- list(ranger = ranger_red, \n                  xgb = xgb_red,\n                  gbm = gbm_red)\n\n\n\n\n\n\n## Importance frame (wide format) ===\nimportance_wide <- cbind(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(var_ranger = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_ranger\" = \"Overall\"),\n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Imp_gbm\" = \"rel.inf\"),\n  varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_gbm\" = \"Overall\"))  %>% \n  kableExtra::kable()\n\n\n## Importance frame (long format for plotting) ===\nimportances_long_LR1 <- full_join(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"ranger\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\"),\n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(variable = rownames(.),\n           model = \"gbm\") %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Importance\" = \"rel.inf\") %>% \n    select(variable, model, Importance)) %>% \n  full_join(varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"xgb\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\")) %>%\n  mutate(hypothesis = case_when(variable %in% H1_vars ~ \"H1\",\n                                variable %in% H2_vars ~ \"H2\",\n                                variable %in% H3_vars ~ \"H3\",\n                                variable %in% H4_vars ~ \"H4\",\n                                .default = \"H1\"))\n\n```\n\n## Log Ratio 2\n\n```{r}\n## reduced:\nranger_red <- saved_models[[4]][[1]]\nxgb_red <- saved_models[[4]][[2]]\ngbm_red <- saved_models[[4]][[3]]\n\n## Ranger =====\nranger_red$finalModel\nranger_red$results\nplot(ranger_red)\n\n\n## XGB ======\nplot(xgb_red)\nxgb_red\n\n\n## GBM =====\ngbm_red$finalModel\ngbm_red\n\nmodels_LR2 <- list(ranger = ranger_red, \n                  xgb = xgb_red,\n                  gbm = gbm_red)\n\n\n\n\n## Importance frame (wide format) ===\nimportance_wide <- cbind(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(var_ranger = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_ranger\" = \"Overall\"),\n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Imp_gbm\" = \"rel.inf\"),\n  varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(var_gbm = rownames(.)) %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Imp_gbm\" = \"Overall\")\n)  %>% kableExtra::kable()\n\n\n## Importance frame (long format for plotting) ===\nimportances_long_LR2 <- full_join(\n  varImp(ranger_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"ranger\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\"),\n  summary.gbm(gbm_red$finalModel, plotit=FALSE) %>% \n    mutate_if(is.numeric, round, 2) %>% \n    mutate(variable = rownames(.),\n           model = \"gbm\") %>% \n    arrange(desc(rel.inf)) %>% \n    rename(\"Importance\" = \"rel.inf\") %>% \n    select(variable, model, Importance)) %>% \n  full_join(varImp(xgb_red)$importance %>% \n    round(2) %>% \n    mutate(variable = rownames(.),\n           model = \"xgb\") %>% \n    arrange(desc(Overall)) %>% \n    rename(\"Importance\" = \"Overall\")) %>%\n  mutate(hypothesis = case_when(variable %in% H1_vars ~ \"H1\",\n                                variable %in% H2_vars ~ \"H2\",\n                                variable %in% H3_vars ~ \"H3\",\n                                variable %in% H4_vars ~ \"H4\",\n                                .default = \"H1\"))\n\n\n\n```\n:::\n\n### Variable Importances across models\n::: panel-tabset\n## Jaccard 1\n```{r}\n\n# Plot variable importances across models:\nggplot(data = importances_long_J1, \n       aes(y = variable, x = Importance, fill = hypothesis))+\n  geom_col()+\n  facet_grid(~model, scales = \"free\")+\n  theme_classic()+\n  scale_fill_manual(values = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"))\n```\n## Jaccard 2\n```{r}\n\n# Plot variable importances across models:\nggplot(data = importances_long_J2, \n       aes(y = variable, x = Importance, fill = hypothesis))+\n  geom_col()+\n  facet_grid(~model, scales = \"free\")+\n  theme_classic()+\n  scale_fill_manual(values = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"))\n```\n\n## Log Ratio 1\n```{r}\n# Plot variable importances across models:\nggplot(data = importances_long_LR1, \n       aes(y = variable, x = Importance, fill = hypothesis))+\n  geom_col()+\n  facet_grid(~model, scales = \"free\")+\n  theme_classic()+\n  scale_fill_manual(values = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"))\n```\n\n## Log Ratio 2\n```{r}\n# Plot variable importances across models:\nggplot(data = importances_long_LR2, \n       aes(y = variable, x = Importance, fill = hypothesis))+\n  geom_col()+\n  facet_grid(~model, scales = \"free\")+\n  theme_classic()+\n  scale_fill_manual(values = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"))\n```\n\n\n:::\n\n\n\n\n# Resamples across models:\n:::panel-tabset\n## Jaccard 1\n```{r}\n## Jaccard 1\n# Create resamples for each model\nresamps_J1 <- resamples(list(\n  ranger = models_J1[[1]],\n  xgb = models_J1[[2]],\n  gbm = models_J1[[3]]\n))\n\n# Plot the resampled error rates for each model\ndotplot_resamps_J1 <- dotplot(resamps_J1)\n\n# Summarize the resamples\nsummary_resamps_J1 <- summary(resamps_J1)\n```\n\n## Jaccard 2\n```{r}\n# Create resamples for each model\nresamps_J2 <- resamples(list(\n  ranger = models_J2[[1]],\n  xgb = models_J2[[2]],\n  gbm = models_J2[[3]]\n))\n\n# Plot the resampled error rates for each model\ndotplot_resamps_J2 <- dotplot(resamps_J2)\n\n# Summarize the resamples\nsummary_resamps_J2 <- summary(resamps_J2)\n```\n\n## Log Ratio 1\n```{r}\n# Create resamples for each model\nresamps_LR1 <- resamples(list(\n  ranger = models_LR1[[1]],\n  xgb = models_LR1[[2]],\n  gbm = models_LR1[[3]]\n))\n\n# Plot the resampled error rates for each model\ndotplot_resamps_LR1 <- dotplot(resamps_LR1)\n\n# Summarize the resamples\nsummary_resamps_LR1 <- summary(resamps_LR1)\n```\n\n## Log Ratio 2\n```{r}\n# Create resamples for each model\nresamps_LR2 <- resamples(list(\n  ranger = models_LR2[[1]],\n  xgb = models_LR2[[2]],\n  gbm = models_LR2[[3]]\n))\n\n# Plot the resampled error rates for each model\ndotplot_resamps_LR2 <- dotplot(resamps_LR2)\n\n# Summarize the resamples\nsummary_resamps_LR2 <- summary(resamps_LR2)\n```\n:::\n\n### Summary across all analyses\n```{r}\n#| code-fold: true\nresamples_all <- list(\n  Jaccard1 = list(\n    resamps_J1 = resamps_J1,\n    Dotplot = dotplot_resamps_J1, # store the dotplot object\n    Summary = summary_resamps_J1  # store the summary object\n  ),\n  Jaccard2 = list(\n    resamps_J2 = resamps_J2,\n    Dotplot = dotplot_resamps_J2, # store the dotplot object\n    Summary = summary_resamps_J2  # store the summary object\n  ),\n  LogRatio1 = list(\n    resamps_LR1 = resamps_LR1,\n    Dotplot = dotplot_resamps_LR1, # store the dotplot object\n    Summary = summary_resamps_LR1  # store the summary object\n  ),\n  LogRatio2 = list(\n    resamps_LR2 = resamps_LR2,\n    Dotplot = dotplot_resamps_LR2, # store the dotplot object\n    Summary = summary_resamps_LR2  # store the summary object\n))\n\n\nresamples_all\n\n\n# save.image(\"data/RData/03_reduced_hyper_para_tuning_all_models.RData\")\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"quarto::html_document":{"self_contained":true,"toc":true,"number_sections":true,"keep_md":true}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"03_HyperparameterTuning.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","bibliography":["references.bib"],"comments":{"hypothesis":true},"theme":"united","monofont":"Cascadia Code","self_contained":true,"title":"Script 3 - Hyperparameter Tuning","author":[{"name":"MSc. Friederike Johanna Rosa WÃ¶lke","orcid":"0000-0001-9034-4883","url":"https://friedarosa.github.io","email":"wolke@fzp.czu.cz","corresponding":true}],"date":"2023-05-29"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}