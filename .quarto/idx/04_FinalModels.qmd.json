{"title":"Script 4 - FinalModels","markdown":{"yaml":{"title":"Script 4 - FinalModels","author":[{"name":"MSc. Friederike Johanna Rosa WÃ¶lke","orcid":"0000-0001-9034-4883","url":"https://friedarosa.github.io","email":"wolke@fzp.czu.cz","corresponding":true}],"date":"2023-05-29"},"headingText":"Source custom functions","containsRefs":false,"markdown":"\n\n::: panel-tabset\n\n```{r}\n#| label: load-functions\n#| message: FALSE\n#| warning: FALSE\nrm(list = ls())\nsource(\"src/functions.R\")\n\n```\n\n## MachineLearning packages\n\n```{r}\n#| label: load-ML-packages\n#| message: FALSE\n#| error: FALSE\n\npckgs <- c(\"dplyr\", \"ggplot2\", \"reshape2\", \n           \"ggcorrplot\", \n           \"caret\",  \"recipes\",   \"caretEnsemble\", \n           \"randomForest\", \"ranger\", \"gbm\", \"xgboost\", \n           \"vegan\", \"pdp\", \n           \"gridExtra\", \"kableExtra\")\n\ninstall_and_load(pckgs)\n```\n\n## Load RData to reduce computing time\n\n```{r}\n#| label: load-RData\n#| message: FALSE\n#| error: FALSE\n\n# Load final workspace to save computing time:\nload(\"data/RData/04_FinalModels.RData\")\n```\n:::\n\n### Train all models together\n\n# Jaccard 1\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: set-vars-J1\n#| warning: false\n\ntictoc::tic(\"J1\")\n# Define model variables  (response, indices and predictors)\nresponse <- \"Jaccard\" # Replace with your actual response variable name\npredictors <- reduced_predictors[[1]] # Replace with your actual predictors\nindex <- indices_J1\ndd <- dat_train_J1 %>% select(all_of(c(response, predictors)))\ndd_test <- dat_test_J1 %>% select(all_of(c(response, predictors)))\n\n# Define training control\ntrained_control <- trainControl(\n  method = \"repeatedcv\",\n  number = 10,\n  repeats = 3,\n  savePredictions = \"final\",\n  returnResamp = \"final\",\n  verboseIter = FALSE,\n  index = index # Ensure indices_J1 is defined\n)\n\n```\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: train-modelsList-J1\n#| warning: false\n#| eval: false\n\ntictoc::tic(\"J1\")\n\n# Train all models at once using caretList / using bestFit hyperparameters from 03_HyperparameterTuning.qmd\nset.seed(42)\nmodelsList_J1 <- caretList(\n  as.formula(paste(response, \"~ .\")),\n  data = dd,\n  trControl = trained_control,\n  tuneList = list(\n    ranger = caretModelSpec(\n      method = \"ranger\",\n      tuneGrid = expand.grid(\n        mtry = 12,\n        splitrule = \"variance\",\n        min.node.size = 5\n      ),\n      importance = \"permutation\",\n      num.trees = 5000\n    ),\n    gbm = caretModelSpec(\n      method = \"gbm\",\n      tuneGrid = expand.grid(\n        n.trees = 300,\n        interaction.depth = 10,\n        shrinkage = 0.1,\n        n.minobsinnode = 10\n      ),\n      verbose = FALSE\n    ),\n    xgbTree = caretModelSpec(\n      method = \"xgbTree\",\n      tuneGrid = expand.grid(\n        nrounds = 1000,\n        eta = 0.1,\n        max_depth = 5,\n        gamma = 0,\n        colsample_bytree = 0.6,\n        min_child_weight = 1,\n        subsample = 1\n      )\n    )\n  )\n)\n```\n\n## Summarize individual models\n\n```{r}\n## Summarzize across individual models ========================================#\n\n# Create resamples from the list of models\nresamps_J1 <- resamples(modelsList_J1)\n\n# Plot the resampled error rates for each model\ndotplot_resamps_J1 <- dotplot(resamps_J1)\n\n# Summarize the resamples\nsummary_resamps_J1 <- summary(resamps_J1)\n\n# Combine everything into a list\nresamples_all_J1 <- list(\n  Jaccard1 = list(\n    resamps_J1 = resamps_J1,\n    Dotplot = dotplot_resamps_J1, # store the dotplot object\n    Summary = summary_resamps_J1  # store the summary object\n  )\n)\n\nresamples_all_J1\n```\n\n## Predictive performances\n\n```{r}\n## Predictive Performance analysis ================================================\np_J1 <- as.data.frame(\n  predict(modelsList_J1, newdata = dd_test)) %>% \n  cbind(dd_test$Jaccard) %>%\n  mutate(\n    error_ranger = dd_test$Jaccard-ranger,\n    error_gbm = dd_test$Jaccard-gbm,\n    error_xgb = dd_test$Jaccard-xgbTree) \n\np_J1 %>%\n  summarise(mean_ranger = mean(error_ranger),\n            mean_gbm = mean(error_gbm),\n            mean_xgb = mean(error_xgb)) %>% \n  kableExtra::kable() # ranger performs best\n```\n\n## Ensemble model\n\nThe ensemble model is not better than the ranger model alone. In fact, it's a bit worse. We will discard the ensembleModel approach therefore.\n\n```{r}\n# Create the ensemble model ================================================\n\n## Are they correlated? \n# yes. not the best foundation for ensembleModels...\nmodelCor(resamples(modelsList_J1))\n\nensembleModel_J1 <- caretEnsemble(\n    modelsList_J1,\n    metric = \"Rsquared\",\n    trControl = trained_control)\nsummary(ensembleModel_J1)\n\n```\n\n## Summarize predictor importances\n\n```{r}\n# Summarize predictor importances ============================================\n\nvarImp(ensembleModel_J1) %>% arrange(desc(overall))\n# ranger\nimp_ranger <- varImp(modelsList_J1[[1]])$importance %>% \n  as.data.frame() %>% \n  rename(\"imp_ranger\" = \"Overall\")\nimp_ranger$var <- row.names(imp_ranger)\n\n# gbm\nimp_gbm <- varImp(modelsList_J1[[2]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_gbm\" = \"Overall\")\nimp_gbm$var <- row.names(imp_gbm)\nimp_merged <- merge(imp_ranger, imp_gbm)\n\n# xgb\nimp_xgb <- varImp(modelsList_J1[[3]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_xgb\" = \"Overall\")\nimp_xgb$var <- row.names(imp_xgb)\n\nimp_merged_all_J1 <- merge(imp_merged, imp_xgb) %>% \n  arrange(desc(imp_ranger))\n\n# Print results\nimp_merged_all_J1 %>% \n  kableExtra::kable()\nvarImp(ensembleModel_J1) %>% \n  arrange(desc(overall)) %>% \n  kableExtra::kable()\n\n\n\n\nrm(response, predictors, index, dd, dd_test, trained_control)\n\ntictoc::toc()\n```\n:::\n\n# Jaccard 2\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: set-vars-J2\n#| warning: false\ntictoc::tic(\"J2\")\n\n# Define model variables  (response, indices and predictors)\nresponse <- \"Jaccard\" # Replace with your actual response variable name\npredictors <- reduced_predictors[[2]] # Replace with your actual predictors\nindex <- indices_J2\ndd <- dat_train_J2 %>% select(all_of(c(response, predictors)))\ndd_test <- dat_test_J2 %>% select(all_of(c(response, predictors)))\n\n# Define training control\ntrained_control <- trainControl(\n  method = \"repeatedcv\",\n  number = 10,\n  repeats = 3,\n  savePredictions = \"final\",\n  returnResamp = \"final\",\n  verboseIter = FALSE,\n  index = index # Ensure indices_J2 is defined\n)\n\n```\n\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: train-modelsList-J2\n#| warning: false\n#| eval: false\ntictoc::tic(\"J2\")\n\n# Train all models at once using caretList / using bestFit hyperparameters from 03_HyperparameterTuning.qmd\nset.seed(42)\nmodelsList_J2 <- caretList(\n  as.formula(paste(response, \"~ .\")),\n  data = dd,\n  trControl = trained_control,\n  tuneList = list(\n    ranger = caretModelSpec(\n      method = \"ranger\",\n      tuneGrid = expand.grid(\n        mtry = 5,\n        splitrule = \"variance\",\n        min.node.size = 5\n      ),\n      importance = \"permutation\",\n      num.trees = 5000\n    ),\n    gbm = caretModelSpec(\n      method = \"gbm\",\n      tuneGrid = expand.grid(\n        n.trees = 50,\n        interaction.depth = 9,\n        shrinkage = 0.1,\n        n.minobsinnode = 10\n      ),\n      verbose = FALSE\n    ),\n    xgbTree = caretModelSpec(\n      method = \"xgbTree\",\n      tuneGrid = expand.grid(\n        nrounds = 1000,\n        eta = 0.1,\n        max_depth = 5,\n        gamma = 0.01,\n        colsample_bytree = 0.6,\n        min_child_weight = 1,\n        subsample = 1\n      )\n    )\n  )\n)\n```\n\n## Summarize individual models\n\n```{r}\n## Summarzize across individual models ========================================#\n\n# Create resamples from the list of models\nresamps_J2 <- resamples(modelsList_J2)\n\n# Plot the resampled error rates for each model\ndotplot_resamps_J2 <- dotplot(resamps_J2)\n\n# Summarize the resamples\nsummary_resamps_J2 <- summary(resamps_J2)\n\n# Combine everything into a list\nresamples_all_J2 <- list(\n  Jaccard1 = list(\n    resamps_J2 = resamps_J2,\n    Dotplot = dotplot_resamps_J2, # store the dotplot object\n    Summary = summary_resamps_J2  # store the summary object\n  )\n)\n\nresamples_all_J2\n```\n\n## Predictive performances\n\n```{r}\n## Predictive Performance analysis ================================================\np_J2 <- as.data.frame(\n  predict(modelsList_J2, newdata = dd_test)) %>% \n  cbind(dd_test$Jaccard) %>%\n  mutate(\n    error_ranger = dd_test$Jaccard-ranger,\n    error_gbm = dd_test$Jaccard-gbm,\n    error_xgb = dd_test$Jaccard-xgbTree) \n\np_J2 %>%\n  summarise(mean_ranger = mean(error_ranger),\n            mean_gbm = mean(error_gbm),\n            mean_xgb = mean(error_xgb)) %>% \n  kableExtra::kable() # ranger performs best\n```\n\n## Ensemble model\n\nThe ensemble model is not better than the ranger model alone. In fact, it's a bit worse. We will discard the ensembleModel approach therefore.\n\n```{r}\n# Create the ensemble model ================================================\n\n## Are they correlated? \n# yes. not the best foundation for ensembleModels...\nmodelCor(resamples(modelsList_J2))\n\nensembleModel_J2 <- caretEnsemble(\n    modelsList_J2,\n    metric = \"Rsquared\",\n    trControl = trained_control)\nsummary(ensembleModel_J2)\n\n```\n\n## Summarize predictor importances\n\n```{r}\n# Summarize predictor importances ============================================\n\nvarImp(ensembleModel_J2) %>% arrange(desc(overall))\n# ranger\nimp_ranger <- varImp(modelsList_J2[[1]])$importance %>% \n  as.data.frame() %>% \n  rename(\"imp_ranger\" = \"Overall\")\nimp_ranger$var <- row.names(imp_ranger)\n\n# gbm\nimp_gbm <- varImp(modelsList_J2[[2]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_gbm\" = \"Overall\")\nimp_gbm$var <- row.names(imp_gbm)\nimp_merged <- merge(imp_ranger, imp_gbm)\n\n# xgb\nimp_xgb <- varImp(modelsList_J2[[3]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_xgb\" = \"Overall\")\nimp_xgb$var <- row.names(imp_xgb)\n\nimp_merged_all_J2 <- merge(imp_merged, imp_xgb) %>% \n  arrange(desc(imp_ranger))\n\n# Print results\nimp_merged_all_J2 %>% \n  kableExtra::kable()\nvarImp(ensembleModel_J2) %>% \n  arrange(desc(overall)) %>% \n  kableExtra::kable()\n\nrm(response, predictors, index, dd, dd_test, trained_control)\n\ntictoc::toc()\n```\n:::\n\n\n\n# Log Ratio 1\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: set-vars-LR1\n#| warning: false\n\ntictoc::tic(\"LR1\")\n# Define model variables  (response, indices and predictors)\nresponse <- \"log_R2_1\" \npredictors <- reduced_predictors[[3]] # Replace with your actual predictors\nindex <- indices_LR1\ndd <- dat_train_LR1 %>% select(all_of(c(response, predictors)))\ndd_test <- dat_test_LR1 %>% select(all_of(c(response, predictors)))\n\n# Define training control\ntrained_control <- trainControl(\n  method = \"repeatedcv\",\n  number = 10,\n  repeats = 3,\n  savePredictions = \"final\",\n  returnResamp = \"final\",\n  verboseIter = FALSE,\n  index = index # Ensure indices_LR1 is defined\n)\n```\n\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: train-modelsList-LR1\n#| warning: false\n#| eval: false\n\ntictoc::tic(\"LR1\")\n\n\n# Train all models at once using caretList / using bestFit hyperparameters from 03_HyperparameterTuning.qmd\nset.seed(42)\nmodelsList_LR1 <- caretList(\n  as.formula(paste(response, \"~ .\")),\n  data = dd,\n  trControl = trained_control,\n  tuneList = list(\n    ranger = caretModelSpec(\n      method = \"ranger\",\n      tuneGrid = expand.grid(\n        mtry = 28,\n        splitrule = \"extratrees\",\n        min.node.size = 5\n      ),\n      importance = \"permutation\",\n      num.trees = 5000\n    ),\n    gbm = caretModelSpec(\n      method = \"gbm\",\n      tuneGrid = expand.grid(\n        n.trees = 50,\n        interaction.depth = 3,\n        shrinkage = 0.1,\n        n.minobsinnode = 10\n      ),\n      verbose = FALSE\n    ),\n    xgbTree = caretModelSpec(\n      method = \"xgbTree\",\n      tuneGrid = expand.grid(\n        nrounds = 1000,\n        eta = 0.1,\n        max_depth = 5,\n        gamma = 0.1,\n        colsample_bytree = 0.6,\n        min_child_weight = 1,\n        subsample = 1\n      )\n    )\n  )\n)\n```\n\n## Summarize individual models\n\n```{r}\n## Summarzize across individual models ========================================#\n\n# Create resamples from the list of models\nresamps_LR1 <- resamples(modelsList_LR1)\n\n# Plot the resampled error rates for each model\ndotplot_resamps_LR1 <- dotplot(resamps_LR1)\n\n# Summarize the resamples\nsummary_resamps_LR1 <- summary(resamps_LR1)\n\n# Combine everything into a list\nresamples_all_LR1 <- list(\n  Jaccard1 = list(\n    resamps_LR1 = resamps_LR1,\n    Dotplot = dotplot_resamps_LR1, # store the dotplot object\n    Summary = summary_resamps_LR1  # store the summary object\n  )\n)\n\nresamples_all_LR1\n```\n\n## Predictive performances\n\n```{r}\n## Predictive Performance analysis ================================================\np_LR1 <- as.data.frame(\n  predict(modelsList_LR1, newdata = dd_test)) %>% \n  cbind(dd_test$log_R2_1) %>%\n  mutate(\n    error_ranger = dd_test$log_R2_1-ranger,\n    error_gbm = dd_test$log_R2_1-gbm,\n    error_xgb = dd_test$log_R2_1-xgbTree) \n\np_LR1 %>%\n  summarise(mean_ranger = mean(error_ranger),\n            mean_gbm = mean(error_gbm),\n            mean_xgb = mean(error_xgb)) %>% \n  kableExtra::kable() # ranger performs best\n```\n\n## Ensemble model\n\nThe ensemble model is not better than the ranger model alone. In fact, it's a bit worse. We will discard the ensembleModel approach therefore.\n\n```{r}\n# Create the ensemble model ================================================\n\n## Are they correlated? \n# yes. not the best foundation for ensembleModels...\nmodelCor(resamples(modelsList_LR1))\n\nensembleModel_LR1 <- caretEnsemble(\n    modelsList_LR1,\n    metric = \"Rsquared\",\n    trControl = trained_control)\nsummary(ensembleModel_LR1)\n\n```\n\n## Summarize predictor importances\n\n```{r}\n# Summarize predictor importances ============================================\n\nvarImp(ensembleModel_LR1) %>% arrange(desc(overall))\n# ranger\nimp_ranger <- varImp(modelsList_LR1[[1]])$importance %>% \n  as.data.frame() %>% \n  rename(\"imp_ranger\" = \"Overall\")\nimp_ranger$var <- row.names(imp_ranger)\n\n# gbm\nimp_gbm <- varImp(modelsList_LR1[[2]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_gbm\" = \"Overall\")\nimp_gbm$var <- row.names(imp_gbm)\nimp_merged <- merge(imp_ranger, imp_gbm)\n\n# xgb\nimp_xgb <- varImp(modelsList_LR1[[3]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_xgb\" = \"Overall\")\nimp_xgb$var <- row.names(imp_xgb)\n\nimp_merged_all_LR1 <- merge(imp_merged, imp_xgb) %>% \n  arrange(desc(imp_ranger))\n\n# Print results\nimp_merged_all_LR1 %>% \n  kableExtra::kable()\nvarImp(ensembleModel_LR1) %>% \n  arrange(desc(overall)) %>% \n  kableExtra::kable()\nrm(response, predictors, index, dd, dd_test, trained_control)\n\ntictoc::toc()\n```\n:::\n\n\n\n# Log Ratio 2\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: set-vars-LR2\n#| warning: false\ntictoc::tic(\"LR2\")\n\n# Define model variables  (response, indices and predictors)\nresponse <- \"log_R2_1\" \npredictors <- reduced_predictors[[4]] # Replace with your actual predictors\nindex <- indices_LR2\ndd <- dat_train_LR2 %>% select(all_of(c(response, predictors)))\ndd_test <- dat_test_LR2 %>% select(all_of(c(response, predictors)))\n\n# Define training control\ntrained_control <- trainControl(\n  method = \"repeatedcv\",\n  number = 10,\n  repeats = 3,\n  savePredictions = \"final\",\n  returnResamp = \"final\",\n  verboseIter = FALSE,\n  index = index # Ensure indices_LR2 is defined\n)\n\n```\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: train-modelsList-LR2\n#| warning: false\n#| eval: false\n\ntictoc::tic(\"LR2\")\n# Train all models at once using caretList / using bestFit hyperparameters from 03_HyperparameterTuning.qmd\nset.seed(42)\nmodelsList_LR2 <- caretList(\n  as.formula(paste(response, \"~ .\")),\n  data = dd,\n  trControl = trained_control,\n  tuneList = list(\n    ranger = caretModelSpec(\n      method = \"ranger\",\n      tuneGrid = expand.grid(\n        mtry = 52,\n        splitrule = \"extratrees\",\n        min.node.size = 5\n      ),\n      importance = \"permutation\",\n      num.trees = 5000\n    ),\n    gbm = caretModelSpec(\n      method = \"gbm\",\n      tuneGrid = expand.grid(\n        n.trees = 50,\n        interaction.depth = 7,\n        shrinkage = 0.1,\n        n.minobsinnode = 10\n      ),\n      verbose = FALSE\n    ),\n    xgbTree = caretModelSpec(\n      method = \"xgbTree\",\n      tuneGrid = expand.grid(\n        nrounds = 1000,\n        eta = 0.1,\n        max_depth = 5,\n        gamma = 0.1,\n        colsample_bytree = 0.6,\n        min_child_weight = 1,\n        subsample = 1\n      )\n    )\n  )\n)\n```\n\n## Summarize individual models\n\n```{r}\n## Summarzize across individual models ========================================#\n\n# Create resamples from the list of models\nresamps_LR2 <- resamples(modelsList_LR2)\n\n# Plot the resampled error rates for each model\ndotplot_resamps_LR2 <- dotplot(resamps_LR2)\n\n# Summarize the resamples\nsummary_resamps_LR2 <- summary(resamps_LR2)\n\n# Combine everything into a list\nresamples_all_LR2 <- list(\n  Jaccard1 = list(\n    resamps_LR2 = resamps_LR2,\n    Dotplot = dotplot_resamps_LR2, # store the dotplot object\n    Summary = summary_resamps_LR2  # store the summary object\n  )\n)\n\nresamples_all_LR2\n```\n\n## Predictive performances\n\n```{r}\n## Predictive Performance analysis ================================================\np_LR2 <- as.data.frame(\n  predict(modelsList_LR2, newdata = dd_test)) %>% \n  cbind(dd_test$log_R2_1) %>%\n  mutate(\n    error_ranger = dd_test$log_R2_1-ranger,\n    error_gbm = dd_test$log_R2_1-gbm,\n    error_xgb = dd_test$log_R2_1-xgbTree) \n\np_LR2 %>%\n  summarise(mean_ranger = mean(error_ranger),\n            mean_gbm = mean(error_gbm),\n            mean_xgb = mean(error_xgb)) %>% \n  kableExtra::kable() # ranger performs best\n```\n\n## Ensemble model\n\nThe ensemble model is not better than the ranger model alone. In fact, it's a bit worse. We will discard the ensembleModel approach therefore.\n\n```{r}\n# Create the ensemble model ================================================\n\n## Are they correlated? \n# yes. not the best foundation for ensembleModels...\nmodelCor(resamples(modelsList_LR2))\n\nensembleModel_LR2 <- caretEnsemble(\n    modelsList_LR2,\n    metric = \"Rsquared\",\n    trControl = trained_control)\nsummary(ensembleModel_LR2)\n\n```\n\n## Summarize predictor importances\n\n```{r}\n# Summarize predictor importances ============================================\n\nvarImp(ensembleModel_LR2) %>% arrange(desc(overall))\n# ranger\nimp_ranger <- varImp(modelsList_LR2[[1]])$importance %>% \n  as.data.frame() %>% \n  rename(\"imp_ranger\" = \"Overall\")\nimp_ranger$var <- row.names(imp_ranger)\n\n# gbm\nimp_gbm <- varImp(modelsList_LR2[[2]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_gbm\" = \"Overall\")\nimp_gbm$var <- row.names(imp_gbm)\nimp_merged <- merge(imp_ranger, imp_gbm)\n\n# xgb\nimp_xgb <- varImp(modelsList_LR2[[3]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_xgb\" = \"Overall\")\nimp_xgb$var <- row.names(imp_xgb)\n\nimp_merged_all_LR2 <- merge(imp_merged, imp_xgb) %>% \n  arrange(desc(imp_ranger))\n\n# Print results\nimp_merged_all_LR2 %>% \n  kableExtra::kable()\nvarImp(ensembleModel_LR2) %>% \n  arrange(desc(overall)) %>% \n  kableExtra::kable()\n\nrm(response, predictors, index, dd, dd_test, trained_control)\n\ntictoc::toc()\n\n```\n:::\n\n# Save the models\n```{r}\n# save.image(\"data/RData/04_FinalModels.RData\")\n```\n\n","srcMarkdownNoYaml":"\n\n::: panel-tabset\n## Source custom functions\n\n```{r}\n#| label: load-functions\n#| message: FALSE\n#| warning: FALSE\nrm(list = ls())\nsource(\"src/functions.R\")\n\n```\n\n## MachineLearning packages\n\n```{r}\n#| label: load-ML-packages\n#| message: FALSE\n#| error: FALSE\n\npckgs <- c(\"dplyr\", \"ggplot2\", \"reshape2\", \n           \"ggcorrplot\", \n           \"caret\",  \"recipes\",   \"caretEnsemble\", \n           \"randomForest\", \"ranger\", \"gbm\", \"xgboost\", \n           \"vegan\", \"pdp\", \n           \"gridExtra\", \"kableExtra\")\n\ninstall_and_load(pckgs)\n```\n\n## Load RData to reduce computing time\n\n```{r}\n#| label: load-RData\n#| message: FALSE\n#| error: FALSE\n\n# Load final workspace to save computing time:\nload(\"data/RData/04_FinalModels.RData\")\n```\n:::\n\n### Train all models together\n\n# Jaccard 1\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: set-vars-J1\n#| warning: false\n\ntictoc::tic(\"J1\")\n# Define model variables  (response, indices and predictors)\nresponse <- \"Jaccard\" # Replace with your actual response variable name\npredictors <- reduced_predictors[[1]] # Replace with your actual predictors\nindex <- indices_J1\ndd <- dat_train_J1 %>% select(all_of(c(response, predictors)))\ndd_test <- dat_test_J1 %>% select(all_of(c(response, predictors)))\n\n# Define training control\ntrained_control <- trainControl(\n  method = \"repeatedcv\",\n  number = 10,\n  repeats = 3,\n  savePredictions = \"final\",\n  returnResamp = \"final\",\n  verboseIter = FALSE,\n  index = index # Ensure indices_J1 is defined\n)\n\n```\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: train-modelsList-J1\n#| warning: false\n#| eval: false\n\ntictoc::tic(\"J1\")\n\n# Train all models at once using caretList / using bestFit hyperparameters from 03_HyperparameterTuning.qmd\nset.seed(42)\nmodelsList_J1 <- caretList(\n  as.formula(paste(response, \"~ .\")),\n  data = dd,\n  trControl = trained_control,\n  tuneList = list(\n    ranger = caretModelSpec(\n      method = \"ranger\",\n      tuneGrid = expand.grid(\n        mtry = 12,\n        splitrule = \"variance\",\n        min.node.size = 5\n      ),\n      importance = \"permutation\",\n      num.trees = 5000\n    ),\n    gbm = caretModelSpec(\n      method = \"gbm\",\n      tuneGrid = expand.grid(\n        n.trees = 300,\n        interaction.depth = 10,\n        shrinkage = 0.1,\n        n.minobsinnode = 10\n      ),\n      verbose = FALSE\n    ),\n    xgbTree = caretModelSpec(\n      method = \"xgbTree\",\n      tuneGrid = expand.grid(\n        nrounds = 1000,\n        eta = 0.1,\n        max_depth = 5,\n        gamma = 0,\n        colsample_bytree = 0.6,\n        min_child_weight = 1,\n        subsample = 1\n      )\n    )\n  )\n)\n```\n\n## Summarize individual models\n\n```{r}\n## Summarzize across individual models ========================================#\n\n# Create resamples from the list of models\nresamps_J1 <- resamples(modelsList_J1)\n\n# Plot the resampled error rates for each model\ndotplot_resamps_J1 <- dotplot(resamps_J1)\n\n# Summarize the resamples\nsummary_resamps_J1 <- summary(resamps_J1)\n\n# Combine everything into a list\nresamples_all_J1 <- list(\n  Jaccard1 = list(\n    resamps_J1 = resamps_J1,\n    Dotplot = dotplot_resamps_J1, # store the dotplot object\n    Summary = summary_resamps_J1  # store the summary object\n  )\n)\n\nresamples_all_J1\n```\n\n## Predictive performances\n\n```{r}\n## Predictive Performance analysis ================================================\np_J1 <- as.data.frame(\n  predict(modelsList_J1, newdata = dd_test)) %>% \n  cbind(dd_test$Jaccard) %>%\n  mutate(\n    error_ranger = dd_test$Jaccard-ranger,\n    error_gbm = dd_test$Jaccard-gbm,\n    error_xgb = dd_test$Jaccard-xgbTree) \n\np_J1 %>%\n  summarise(mean_ranger = mean(error_ranger),\n            mean_gbm = mean(error_gbm),\n            mean_xgb = mean(error_xgb)) %>% \n  kableExtra::kable() # ranger performs best\n```\n\n## Ensemble model\n\nThe ensemble model is not better than the ranger model alone. In fact, it's a bit worse. We will discard the ensembleModel approach therefore.\n\n```{r}\n# Create the ensemble model ================================================\n\n## Are they correlated? \n# yes. not the best foundation for ensembleModels...\nmodelCor(resamples(modelsList_J1))\n\nensembleModel_J1 <- caretEnsemble(\n    modelsList_J1,\n    metric = \"Rsquared\",\n    trControl = trained_control)\nsummary(ensembleModel_J1)\n\n```\n\n## Summarize predictor importances\n\n```{r}\n# Summarize predictor importances ============================================\n\nvarImp(ensembleModel_J1) %>% arrange(desc(overall))\n# ranger\nimp_ranger <- varImp(modelsList_J1[[1]])$importance %>% \n  as.data.frame() %>% \n  rename(\"imp_ranger\" = \"Overall\")\nimp_ranger$var <- row.names(imp_ranger)\n\n# gbm\nimp_gbm <- varImp(modelsList_J1[[2]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_gbm\" = \"Overall\")\nimp_gbm$var <- row.names(imp_gbm)\nimp_merged <- merge(imp_ranger, imp_gbm)\n\n# xgb\nimp_xgb <- varImp(modelsList_J1[[3]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_xgb\" = \"Overall\")\nimp_xgb$var <- row.names(imp_xgb)\n\nimp_merged_all_J1 <- merge(imp_merged, imp_xgb) %>% \n  arrange(desc(imp_ranger))\n\n# Print results\nimp_merged_all_J1 %>% \n  kableExtra::kable()\nvarImp(ensembleModel_J1) %>% \n  arrange(desc(overall)) %>% \n  kableExtra::kable()\n\n\n\n\nrm(response, predictors, index, dd, dd_test, trained_control)\n\ntictoc::toc()\n```\n:::\n\n# Jaccard 2\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: set-vars-J2\n#| warning: false\ntictoc::tic(\"J2\")\n\n# Define model variables  (response, indices and predictors)\nresponse <- \"Jaccard\" # Replace with your actual response variable name\npredictors <- reduced_predictors[[2]] # Replace with your actual predictors\nindex <- indices_J2\ndd <- dat_train_J2 %>% select(all_of(c(response, predictors)))\ndd_test <- dat_test_J2 %>% select(all_of(c(response, predictors)))\n\n# Define training control\ntrained_control <- trainControl(\n  method = \"repeatedcv\",\n  number = 10,\n  repeats = 3,\n  savePredictions = \"final\",\n  returnResamp = \"final\",\n  verboseIter = FALSE,\n  index = index # Ensure indices_J2 is defined\n)\n\n```\n\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: train-modelsList-J2\n#| warning: false\n#| eval: false\ntictoc::tic(\"J2\")\n\n# Train all models at once using caretList / using bestFit hyperparameters from 03_HyperparameterTuning.qmd\nset.seed(42)\nmodelsList_J2 <- caretList(\n  as.formula(paste(response, \"~ .\")),\n  data = dd,\n  trControl = trained_control,\n  tuneList = list(\n    ranger = caretModelSpec(\n      method = \"ranger\",\n      tuneGrid = expand.grid(\n        mtry = 5,\n        splitrule = \"variance\",\n        min.node.size = 5\n      ),\n      importance = \"permutation\",\n      num.trees = 5000\n    ),\n    gbm = caretModelSpec(\n      method = \"gbm\",\n      tuneGrid = expand.grid(\n        n.trees = 50,\n        interaction.depth = 9,\n        shrinkage = 0.1,\n        n.minobsinnode = 10\n      ),\n      verbose = FALSE\n    ),\n    xgbTree = caretModelSpec(\n      method = \"xgbTree\",\n      tuneGrid = expand.grid(\n        nrounds = 1000,\n        eta = 0.1,\n        max_depth = 5,\n        gamma = 0.01,\n        colsample_bytree = 0.6,\n        min_child_weight = 1,\n        subsample = 1\n      )\n    )\n  )\n)\n```\n\n## Summarize individual models\n\n```{r}\n## Summarzize across individual models ========================================#\n\n# Create resamples from the list of models\nresamps_J2 <- resamples(modelsList_J2)\n\n# Plot the resampled error rates for each model\ndotplot_resamps_J2 <- dotplot(resamps_J2)\n\n# Summarize the resamples\nsummary_resamps_J2 <- summary(resamps_J2)\n\n# Combine everything into a list\nresamples_all_J2 <- list(\n  Jaccard1 = list(\n    resamps_J2 = resamps_J2,\n    Dotplot = dotplot_resamps_J2, # store the dotplot object\n    Summary = summary_resamps_J2  # store the summary object\n  )\n)\n\nresamples_all_J2\n```\n\n## Predictive performances\n\n```{r}\n## Predictive Performance analysis ================================================\np_J2 <- as.data.frame(\n  predict(modelsList_J2, newdata = dd_test)) %>% \n  cbind(dd_test$Jaccard) %>%\n  mutate(\n    error_ranger = dd_test$Jaccard-ranger,\n    error_gbm = dd_test$Jaccard-gbm,\n    error_xgb = dd_test$Jaccard-xgbTree) \n\np_J2 %>%\n  summarise(mean_ranger = mean(error_ranger),\n            mean_gbm = mean(error_gbm),\n            mean_xgb = mean(error_xgb)) %>% \n  kableExtra::kable() # ranger performs best\n```\n\n## Ensemble model\n\nThe ensemble model is not better than the ranger model alone. In fact, it's a bit worse. We will discard the ensembleModel approach therefore.\n\n```{r}\n# Create the ensemble model ================================================\n\n## Are they correlated? \n# yes. not the best foundation for ensembleModels...\nmodelCor(resamples(modelsList_J2))\n\nensembleModel_J2 <- caretEnsemble(\n    modelsList_J2,\n    metric = \"Rsquared\",\n    trControl = trained_control)\nsummary(ensembleModel_J2)\n\n```\n\n## Summarize predictor importances\n\n```{r}\n# Summarize predictor importances ============================================\n\nvarImp(ensembleModel_J2) %>% arrange(desc(overall))\n# ranger\nimp_ranger <- varImp(modelsList_J2[[1]])$importance %>% \n  as.data.frame() %>% \n  rename(\"imp_ranger\" = \"Overall\")\nimp_ranger$var <- row.names(imp_ranger)\n\n# gbm\nimp_gbm <- varImp(modelsList_J2[[2]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_gbm\" = \"Overall\")\nimp_gbm$var <- row.names(imp_gbm)\nimp_merged <- merge(imp_ranger, imp_gbm)\n\n# xgb\nimp_xgb <- varImp(modelsList_J2[[3]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_xgb\" = \"Overall\")\nimp_xgb$var <- row.names(imp_xgb)\n\nimp_merged_all_J2 <- merge(imp_merged, imp_xgb) %>% \n  arrange(desc(imp_ranger))\n\n# Print results\nimp_merged_all_J2 %>% \n  kableExtra::kable()\nvarImp(ensembleModel_J2) %>% \n  arrange(desc(overall)) %>% \n  kableExtra::kable()\n\nrm(response, predictors, index, dd, dd_test, trained_control)\n\ntictoc::toc()\n```\n:::\n\n\n\n# Log Ratio 1\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: set-vars-LR1\n#| warning: false\n\ntictoc::tic(\"LR1\")\n# Define model variables  (response, indices and predictors)\nresponse <- \"log_R2_1\" \npredictors <- reduced_predictors[[3]] # Replace with your actual predictors\nindex <- indices_LR1\ndd <- dat_train_LR1 %>% select(all_of(c(response, predictors)))\ndd_test <- dat_test_LR1 %>% select(all_of(c(response, predictors)))\n\n# Define training control\ntrained_control <- trainControl(\n  method = \"repeatedcv\",\n  number = 10,\n  repeats = 3,\n  savePredictions = \"final\",\n  returnResamp = \"final\",\n  verboseIter = FALSE,\n  index = index # Ensure indices_LR1 is defined\n)\n```\n\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: train-modelsList-LR1\n#| warning: false\n#| eval: false\n\ntictoc::tic(\"LR1\")\n\n\n# Train all models at once using caretList / using bestFit hyperparameters from 03_HyperparameterTuning.qmd\nset.seed(42)\nmodelsList_LR1 <- caretList(\n  as.formula(paste(response, \"~ .\")),\n  data = dd,\n  trControl = trained_control,\n  tuneList = list(\n    ranger = caretModelSpec(\n      method = \"ranger\",\n      tuneGrid = expand.grid(\n        mtry = 28,\n        splitrule = \"extratrees\",\n        min.node.size = 5\n      ),\n      importance = \"permutation\",\n      num.trees = 5000\n    ),\n    gbm = caretModelSpec(\n      method = \"gbm\",\n      tuneGrid = expand.grid(\n        n.trees = 50,\n        interaction.depth = 3,\n        shrinkage = 0.1,\n        n.minobsinnode = 10\n      ),\n      verbose = FALSE\n    ),\n    xgbTree = caretModelSpec(\n      method = \"xgbTree\",\n      tuneGrid = expand.grid(\n        nrounds = 1000,\n        eta = 0.1,\n        max_depth = 5,\n        gamma = 0.1,\n        colsample_bytree = 0.6,\n        min_child_weight = 1,\n        subsample = 1\n      )\n    )\n  )\n)\n```\n\n## Summarize individual models\n\n```{r}\n## Summarzize across individual models ========================================#\n\n# Create resamples from the list of models\nresamps_LR1 <- resamples(modelsList_LR1)\n\n# Plot the resampled error rates for each model\ndotplot_resamps_LR1 <- dotplot(resamps_LR1)\n\n# Summarize the resamples\nsummary_resamps_LR1 <- summary(resamps_LR1)\n\n# Combine everything into a list\nresamples_all_LR1 <- list(\n  Jaccard1 = list(\n    resamps_LR1 = resamps_LR1,\n    Dotplot = dotplot_resamps_LR1, # store the dotplot object\n    Summary = summary_resamps_LR1  # store the summary object\n  )\n)\n\nresamples_all_LR1\n```\n\n## Predictive performances\n\n```{r}\n## Predictive Performance analysis ================================================\np_LR1 <- as.data.frame(\n  predict(modelsList_LR1, newdata = dd_test)) %>% \n  cbind(dd_test$log_R2_1) %>%\n  mutate(\n    error_ranger = dd_test$log_R2_1-ranger,\n    error_gbm = dd_test$log_R2_1-gbm,\n    error_xgb = dd_test$log_R2_1-xgbTree) \n\np_LR1 %>%\n  summarise(mean_ranger = mean(error_ranger),\n            mean_gbm = mean(error_gbm),\n            mean_xgb = mean(error_xgb)) %>% \n  kableExtra::kable() # ranger performs best\n```\n\n## Ensemble model\n\nThe ensemble model is not better than the ranger model alone. In fact, it's a bit worse. We will discard the ensembleModel approach therefore.\n\n```{r}\n# Create the ensemble model ================================================\n\n## Are they correlated? \n# yes. not the best foundation for ensembleModels...\nmodelCor(resamples(modelsList_LR1))\n\nensembleModel_LR1 <- caretEnsemble(\n    modelsList_LR1,\n    metric = \"Rsquared\",\n    trControl = trained_control)\nsummary(ensembleModel_LR1)\n\n```\n\n## Summarize predictor importances\n\n```{r}\n# Summarize predictor importances ============================================\n\nvarImp(ensembleModel_LR1) %>% arrange(desc(overall))\n# ranger\nimp_ranger <- varImp(modelsList_LR1[[1]])$importance %>% \n  as.data.frame() %>% \n  rename(\"imp_ranger\" = \"Overall\")\nimp_ranger$var <- row.names(imp_ranger)\n\n# gbm\nimp_gbm <- varImp(modelsList_LR1[[2]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_gbm\" = \"Overall\")\nimp_gbm$var <- row.names(imp_gbm)\nimp_merged <- merge(imp_ranger, imp_gbm)\n\n# xgb\nimp_xgb <- varImp(modelsList_LR1[[3]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_xgb\" = \"Overall\")\nimp_xgb$var <- row.names(imp_xgb)\n\nimp_merged_all_LR1 <- merge(imp_merged, imp_xgb) %>% \n  arrange(desc(imp_ranger))\n\n# Print results\nimp_merged_all_LR1 %>% \n  kableExtra::kable()\nvarImp(ensembleModel_LR1) %>% \n  arrange(desc(overall)) %>% \n  kableExtra::kable()\nrm(response, predictors, index, dd, dd_test, trained_control)\n\ntictoc::toc()\n```\n:::\n\n\n\n# Log Ratio 2\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: set-vars-LR2\n#| warning: false\ntictoc::tic(\"LR2\")\n\n# Define model variables  (response, indices and predictors)\nresponse <- \"log_R2_1\" \npredictors <- reduced_predictors[[4]] # Replace with your actual predictors\nindex <- indices_LR2\ndd <- dat_train_LR2 %>% select(all_of(c(response, predictors)))\ndd_test <- dat_test_LR2 %>% select(all_of(c(response, predictors)))\n\n# Define training control\ntrained_control <- trainControl(\n  method = \"repeatedcv\",\n  number = 10,\n  repeats = 3,\n  savePredictions = \"final\",\n  returnResamp = \"final\",\n  verboseIter = FALSE,\n  index = index # Ensure indices_LR2 is defined\n)\n\n```\n\n::: panel-tabset\n## Train model\n\n```{r}\n#| label: train-modelsList-LR2\n#| warning: false\n#| eval: false\n\ntictoc::tic(\"LR2\")\n# Train all models at once using caretList / using bestFit hyperparameters from 03_HyperparameterTuning.qmd\nset.seed(42)\nmodelsList_LR2 <- caretList(\n  as.formula(paste(response, \"~ .\")),\n  data = dd,\n  trControl = trained_control,\n  tuneList = list(\n    ranger = caretModelSpec(\n      method = \"ranger\",\n      tuneGrid = expand.grid(\n        mtry = 52,\n        splitrule = \"extratrees\",\n        min.node.size = 5\n      ),\n      importance = \"permutation\",\n      num.trees = 5000\n    ),\n    gbm = caretModelSpec(\n      method = \"gbm\",\n      tuneGrid = expand.grid(\n        n.trees = 50,\n        interaction.depth = 7,\n        shrinkage = 0.1,\n        n.minobsinnode = 10\n      ),\n      verbose = FALSE\n    ),\n    xgbTree = caretModelSpec(\n      method = \"xgbTree\",\n      tuneGrid = expand.grid(\n        nrounds = 1000,\n        eta = 0.1,\n        max_depth = 5,\n        gamma = 0.1,\n        colsample_bytree = 0.6,\n        min_child_weight = 1,\n        subsample = 1\n      )\n    )\n  )\n)\n```\n\n## Summarize individual models\n\n```{r}\n## Summarzize across individual models ========================================#\n\n# Create resamples from the list of models\nresamps_LR2 <- resamples(modelsList_LR2)\n\n# Plot the resampled error rates for each model\ndotplot_resamps_LR2 <- dotplot(resamps_LR2)\n\n# Summarize the resamples\nsummary_resamps_LR2 <- summary(resamps_LR2)\n\n# Combine everything into a list\nresamples_all_LR2 <- list(\n  Jaccard1 = list(\n    resamps_LR2 = resamps_LR2,\n    Dotplot = dotplot_resamps_LR2, # store the dotplot object\n    Summary = summary_resamps_LR2  # store the summary object\n  )\n)\n\nresamples_all_LR2\n```\n\n## Predictive performances\n\n```{r}\n## Predictive Performance analysis ================================================\np_LR2 <- as.data.frame(\n  predict(modelsList_LR2, newdata = dd_test)) %>% \n  cbind(dd_test$log_R2_1) %>%\n  mutate(\n    error_ranger = dd_test$log_R2_1-ranger,\n    error_gbm = dd_test$log_R2_1-gbm,\n    error_xgb = dd_test$log_R2_1-xgbTree) \n\np_LR2 %>%\n  summarise(mean_ranger = mean(error_ranger),\n            mean_gbm = mean(error_gbm),\n            mean_xgb = mean(error_xgb)) %>% \n  kableExtra::kable() # ranger performs best\n```\n\n## Ensemble model\n\nThe ensemble model is not better than the ranger model alone. In fact, it's a bit worse. We will discard the ensembleModel approach therefore.\n\n```{r}\n# Create the ensemble model ================================================\n\n## Are they correlated? \n# yes. not the best foundation for ensembleModels...\nmodelCor(resamples(modelsList_LR2))\n\nensembleModel_LR2 <- caretEnsemble(\n    modelsList_LR2,\n    metric = \"Rsquared\",\n    trControl = trained_control)\nsummary(ensembleModel_LR2)\n\n```\n\n## Summarize predictor importances\n\n```{r}\n# Summarize predictor importances ============================================\n\nvarImp(ensembleModel_LR2) %>% arrange(desc(overall))\n# ranger\nimp_ranger <- varImp(modelsList_LR2[[1]])$importance %>% \n  as.data.frame() %>% \n  rename(\"imp_ranger\" = \"Overall\")\nimp_ranger$var <- row.names(imp_ranger)\n\n# gbm\nimp_gbm <- varImp(modelsList_LR2[[2]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_gbm\" = \"Overall\")\nimp_gbm$var <- row.names(imp_gbm)\nimp_merged <- merge(imp_ranger, imp_gbm)\n\n# xgb\nimp_xgb <- varImp(modelsList_LR2[[3]])$importance %>% \n  as.data.frame()%>% \n  rename(\"imp_xgb\" = \"Overall\")\nimp_xgb$var <- row.names(imp_xgb)\n\nimp_merged_all_LR2 <- merge(imp_merged, imp_xgb) %>% \n  arrange(desc(imp_ranger))\n\n# Print results\nimp_merged_all_LR2 %>% \n  kableExtra::kable()\nvarImp(ensembleModel_LR2) %>% \n  arrange(desc(overall)) %>% \n  kableExtra::kable()\n\nrm(response, predictors, index, dd, dd_test, trained_control)\n\ntictoc::toc()\n\n```\n:::\n\n# Save the models\n```{r}\n# save.image(\"data/RData/04_FinalModels.RData\")\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"quarto::html_document":{"self_contained":true,"toc":true,"number_sections":true,"keep_md":true}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"04_FinalModels.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","bibliography":["references.bib"],"comments":{"hypothesis":true},"theme":"united","monofont":"Cascadia Code","title":"Script 4 - FinalModels","author":[{"name":"MSc. Friederike Johanna Rosa WÃ¶lke","orcid":"0000-0001-9034-4883","url":"https://friedarosa.github.io","email":"wolke@fzp.czu.cz","corresponding":true}],"date":"2023-05-29"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}