{"title":"Script 5 - Variation Partitioning","markdown":{"yaml":{"title":"Script 5 - Variation Partitioning","author":[{"name":"MSc. Friederike Johanna Rosa WÃ¶lke","orcid":"0000-0001-9034-4883","url":"https://friedarosa.github.io","email":"wolke@fzp.czu.cz","corresponding":true}],"date":"2023-05-29","format":{"html":{"toc":true,"code-overflow":"wrap","bibliography":"references.bib","monofont":"Cascadia Code"}}},"headingText":"Source: Custom Functions","containsRefs":false,"markdown":"\n\n::: panel-tabset\n\n```{r}\n#| label: load-packages\n#| message: FALSE\n#| warning: FALSE\n\nrm(list = ls())\n#setwd(\"StaticPatterNN/\")\nsource(\"src/functions.R\")\n\n```\n\n## Machine Learning Packages\n\n```{r}\n#| label: load-ML-packages\n#| message: FALSE\n#| error: FALSE\n\npckgs <- c(\"dplyr\", \"ggplot2\", \"reshape2\", \n           \"ggcorrplot\", \n           \"caret\",  \"recipes\",   \"caretEnsemble\", \n           \"randomForest\", \"ranger\", \"gbm\", \"xgboost\", \n           \"vegan\", \"pdp\", \n           \"gridExtra\", \"kableExtra\")\n\ninstall_and_load(pckgs)\n```\n\n## Load RData to reduce computing time\n\n```{r}\n#| label: load-RData\n#| message: FALSE\n#| error: FALSE\n\n# Load workspace to save computing time:\n## it has: varPart from ranger models\n## recursive feature selection results\n\n# load(\"data/varPart_rfe.RData\")\n# load(\"data/models.RData\")\n# load(\"data/RData/01_Data_prep.RData\")\nload(\"data/RData/05_VarPart_loop.RData\")\n```\n:::\n\n### Variation Partitioning between Hypotheses\n\nNow we will look which of the four hypotheses explains most variation in the response.\n\n::: panel-tabset\n## Variation Partitioning - ranger loops (Jaccard & log Ratio)\n\n```{r}\n#| label: var-part-rf-all\n#| eval: false\n\nindex_list <- list(indices_J1, indices_J2, indices_LR1, indices_LR2)\ndat_train_list <- list(dat_train_J1, dat_train_J2, dat_train_LR1, dat_train_LR2)\nresponse_list <- c(\"Jaccard\", \"Jaccard\", \"log_R2_1\", \"log_R2_1\")\n\nvarPart_list <- replicate(4, list())\n\nfor(i in seq_along(1:4)){\n  \n  dat_train <- dat_train_list[[i]]\n  index <- index_list[[i]]\n  response <- response_list[[i]]\n\n  trainControl <- trainControl(\n    method = \"repeatedcv\",\n    number = 10,\n    repeats = 3,\n    savePredictions = \"final\",\n    returnResamp = \"final\",\n    verboseIter = FALSE,\n    index = index)\n\n  tictoc::tic(\"ranger full model\")\n  set.seed(42)\n  full_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train,\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n# Train ranger model\ntictoc::tic(\"ranger H1\")\nset.seed(42)\nH1_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(H1_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H2\")\nset.seed(42)\nH2_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(H2_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H3\")\nset.seed(42)\nH3_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(H3_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\ntictoc::tic(\"ranger H4\")\nset.seed(42)\nH4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(H4_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n### combinations of 2 hypotheses:\n\nset.seed(42)\nH1H2_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H2_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H3_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH3H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\n### combinations of 3 hypotheses together =====\n\nset.seed(42)\nH1H2H3_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H2H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH2H3H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nvarPart_list[[i]] <- list(\n    full_model, H1_model, H2_model, H3_model, H4_model, \n    H1H2_model, H1H3_model, H1H4_model, \n    H2H3_model, H2H4_model, \n    H3H4_model, \n    H1H2H3_model, H1H2H4_model, H1H3H4_model, \n    H2H3H4_model)\n}\n\nsaveRDS(varPart_list, \"data/varPart_list_loop.rds\")\n\n```\n:::\n\n\n```{r}\n#| label: var-part-ranger-performance-eval\n# ===== Performance eval ======= #\n\nperformance <- list()\nperformance_all <- list()\nplots <- list()\ndat_test_list <- list(dat_test_J1, dat_test_J2, dat_test_LR1, dat_test_LR2)\nfor(i in seq_along(1:4)){\n  \n  dat_test <- dat_test_list[[i]]\n  index <- index_list[[i]]\n  response <- response_list[[i]]\n  models <- varPart_list[[i]]\n\n\n# Predict on your test data\npredictions_full <- predict(models[[1]], newdata = dat_test)\n\npredictions_H1 <- predict(models[[2]], newdata = dat_test)\npredictions_H2 <- predict(models[[3]], newdata = dat_test)\npredictions_H3 <- predict(models[[4]], newdata = dat_test)\npredictions_H4 <- predict(models[[5]], newdata = dat_test)\n\npredictions_H1H2 <- predict(models[[6]], newdata = dat_test)\npredictions_H1H3 <- predict(models[[7]], newdata = dat_test)\npredictions_H1H4 <- predict(models[[8]], newdata = dat_test)\npredictions_H2H3 <- predict(models[[9]], newdata = dat_test)\npredictions_H2H4 <- predict(models[[10]], newdata = dat_test)\npredictions_H3H4 <- predict(models[[11]], newdata = dat_test)\n\npredictions_H1H2H3 <- predict(models[[12]], newdata = dat_test)\npredictions_H1H2H4 <- predict(models[[13]], newdata = dat_test)\npredictions_H1H3H4 <- predict(models[[14]], newdata = dat_test)\npredictions_H2H3H4 <- predict(models[[15]], newdata = dat_test)\n\n# Calculate the performance metrics\nperf <- rbind(postResample(pred = predictions_full, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H1, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H2, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H3, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H4, obs = dat_test %>% pull(response)),\n              \n              postResample(pred = predictions_H1H2, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H1H3, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H1H4, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H2H3, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H2H4, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H3H4, obs = dat_test %>% pull(response)),\n              \n              postResample(pred = predictions_H1H2H3, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H1H2H4, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H1H3H4, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H2H3H4, obs = dat_test %>% pull(response))) %>% \n                as.data.frame() %>% \n                round(4)\n\nmodel <- c(\"full\", \n            seq(1:4), \n            \"H1H2\", \"H1H3\", \"H1H4\", \"H2H3\", \"H2H4\", \"H3H4\", \n            \"H1H2H3\", \"H1H2H4\", \"H1H3H4\", \"H2H3H4\")\nperf$model <- model\nperf$subset <- paste0(response,\"_\", i)\n\n# Print the performance metrics\n\nperf %>% \n    kableExtra::kable()\nperf %>% \n    kableExtra::kable() %>% \n    write.csv(paste0(\"data/csv/performance_varExpl_rf_loop_\", response,\"_\",i, \".csv\"))\n\nperformance[[i]] <- slice_min(perf, RMSE) %>% \n    slice_max(Rsquared)\n\nperformance_all[[i]] <- perf\n\n# Create a bar plot of variance explained\nplots[[i]] <- ggplot(perf, aes(x = reorder(model, RMSE), y = Rsquared)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Model\", y = \"Variance Explained\") +\n  theme_minimal()\n}\n\ndo.call(rbind, performance) %>% kableExtra::kable()\ndo.call(rbind, performance_all) %>% kableExtra::kable()\n\nplots\n\n```\n:::\n\n\n```{r}\n# save.image(\"data/RData/05_VarPart_loop.RData\")\n```\n","srcMarkdownNoYaml":"\n\n::: panel-tabset\n## Source: Custom Functions\n\n```{r}\n#| label: load-packages\n#| message: FALSE\n#| warning: FALSE\n\nrm(list = ls())\n#setwd(\"StaticPatterNN/\")\nsource(\"src/functions.R\")\n\n```\n\n## Machine Learning Packages\n\n```{r}\n#| label: load-ML-packages\n#| message: FALSE\n#| error: FALSE\n\npckgs <- c(\"dplyr\", \"ggplot2\", \"reshape2\", \n           \"ggcorrplot\", \n           \"caret\",  \"recipes\",   \"caretEnsemble\", \n           \"randomForest\", \"ranger\", \"gbm\", \"xgboost\", \n           \"vegan\", \"pdp\", \n           \"gridExtra\", \"kableExtra\")\n\ninstall_and_load(pckgs)\n```\n\n## Load RData to reduce computing time\n\n```{r}\n#| label: load-RData\n#| message: FALSE\n#| error: FALSE\n\n# Load workspace to save computing time:\n## it has: varPart from ranger models\n## recursive feature selection results\n\n# load(\"data/varPart_rfe.RData\")\n# load(\"data/models.RData\")\n# load(\"data/RData/01_Data_prep.RData\")\nload(\"data/RData/05_VarPart_loop.RData\")\n```\n:::\n\n### Variation Partitioning between Hypotheses\n\nNow we will look which of the four hypotheses explains most variation in the response.\n\n::: panel-tabset\n## Variation Partitioning - ranger loops (Jaccard & log Ratio)\n\n```{r}\n#| label: var-part-rf-all\n#| eval: false\n\nindex_list <- list(indices_J1, indices_J2, indices_LR1, indices_LR2)\ndat_train_list <- list(dat_train_J1, dat_train_J2, dat_train_LR1, dat_train_LR2)\nresponse_list <- c(\"Jaccard\", \"Jaccard\", \"log_R2_1\", \"log_R2_1\")\n\nvarPart_list <- replicate(4, list())\n\nfor(i in seq_along(1:4)){\n  \n  dat_train <- dat_train_list[[i]]\n  index <- index_list[[i]]\n  response <- response_list[[i]]\n\n  trainControl <- trainControl(\n    method = \"repeatedcv\",\n    number = 10,\n    repeats = 3,\n    savePredictions = \"final\",\n    returnResamp = \"final\",\n    verboseIter = FALSE,\n    index = index)\n\n  tictoc::tic(\"ranger full model\")\n  set.seed(42)\n  full_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train,\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n# Train ranger model\ntictoc::tic(\"ranger H1\")\nset.seed(42)\nH1_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(H1_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H2\")\nset.seed(42)\nH2_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(H2_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H3\")\nset.seed(42)\nH3_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(H3_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\ntictoc::tic(\"ranger H4\")\nset.seed(42)\nH4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(H4_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n### combinations of 2 hypotheses:\n\nset.seed(42)\nH1H2_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H2_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H3_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH3H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\n### combinations of 3 hypotheses together =====\n\nset.seed(42)\nH1H2H3_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H2H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH2H3H4_model <- train(\n    as.formula(paste0(response, \"~ .\")),\n    data = dat_train %>% select(response, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nvarPart_list[[i]] <- list(\n    full_model, H1_model, H2_model, H3_model, H4_model, \n    H1H2_model, H1H3_model, H1H4_model, \n    H2H3_model, H2H4_model, \n    H3H4_model, \n    H1H2H3_model, H1H2H4_model, H1H3H4_model, \n    H2H3H4_model)\n}\n\nsaveRDS(varPart_list, \"data/varPart_list_loop.rds\")\n\n```\n:::\n\n\n```{r}\n#| label: var-part-ranger-performance-eval\n# ===== Performance eval ======= #\n\nperformance <- list()\nperformance_all <- list()\nplots <- list()\ndat_test_list <- list(dat_test_J1, dat_test_J2, dat_test_LR1, dat_test_LR2)\nfor(i in seq_along(1:4)){\n  \n  dat_test <- dat_test_list[[i]]\n  index <- index_list[[i]]\n  response <- response_list[[i]]\n  models <- varPart_list[[i]]\n\n\n# Predict on your test data\npredictions_full <- predict(models[[1]], newdata = dat_test)\n\npredictions_H1 <- predict(models[[2]], newdata = dat_test)\npredictions_H2 <- predict(models[[3]], newdata = dat_test)\npredictions_H3 <- predict(models[[4]], newdata = dat_test)\npredictions_H4 <- predict(models[[5]], newdata = dat_test)\n\npredictions_H1H2 <- predict(models[[6]], newdata = dat_test)\npredictions_H1H3 <- predict(models[[7]], newdata = dat_test)\npredictions_H1H4 <- predict(models[[8]], newdata = dat_test)\npredictions_H2H3 <- predict(models[[9]], newdata = dat_test)\npredictions_H2H4 <- predict(models[[10]], newdata = dat_test)\npredictions_H3H4 <- predict(models[[11]], newdata = dat_test)\n\npredictions_H1H2H3 <- predict(models[[12]], newdata = dat_test)\npredictions_H1H2H4 <- predict(models[[13]], newdata = dat_test)\npredictions_H1H3H4 <- predict(models[[14]], newdata = dat_test)\npredictions_H2H3H4 <- predict(models[[15]], newdata = dat_test)\n\n# Calculate the performance metrics\nperf <- rbind(postResample(pred = predictions_full, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H1, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H2, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H3, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H4, obs = dat_test %>% pull(response)),\n              \n              postResample(pred = predictions_H1H2, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H1H3, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H1H4, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H2H3, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H2H4, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H3H4, obs = dat_test %>% pull(response)),\n              \n              postResample(pred = predictions_H1H2H3, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H1H2H4, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H1H3H4, obs = dat_test %>% pull(response)),\n              postResample(pred = predictions_H2H3H4, obs = dat_test %>% pull(response))) %>% \n                as.data.frame() %>% \n                round(4)\n\nmodel <- c(\"full\", \n            seq(1:4), \n            \"H1H2\", \"H1H3\", \"H1H4\", \"H2H3\", \"H2H4\", \"H3H4\", \n            \"H1H2H3\", \"H1H2H4\", \"H1H3H4\", \"H2H3H4\")\nperf$model <- model\nperf$subset <- paste0(response,\"_\", i)\n\n# Print the performance metrics\n\nperf %>% \n    kableExtra::kable()\nperf %>% \n    kableExtra::kable() %>% \n    write.csv(paste0(\"data/csv/performance_varExpl_rf_loop_\", response,\"_\",i, \".csv\"))\n\nperformance[[i]] <- slice_min(perf, RMSE) %>% \n    slice_max(Rsquared)\n\nperformance_all[[i]] <- perf\n\n# Create a bar plot of variance explained\nplots[[i]] <- ggplot(perf, aes(x = reorder(model, RMSE), y = Rsquared)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Model\", y = \"Variance Explained\") +\n  theme_minimal()\n}\n\ndo.call(rbind, performance) %>% kableExtra::kable()\ndo.call(rbind, performance_all) %>% kableExtra::kable()\n\nplots\n\n```\n:::\n\n\n```{r}\n# save.image(\"data/RData/05_VarPart_loop.RData\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"quarto::html_document":{"self_contained":true,"toc":true,"number_sections":true,"keep_md":true}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"05_VarPart_v2_loop.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","bibliography":["references.bib"],"comments":{"hypothesis":true},"theme":"united","monofont":"Cascadia Code","self_contained":true,"title":"Script 5 - Variation Partitioning","author":[{"name":"MSc. Friederike Johanna Rosa WÃ¶lke","orcid":"0000-0001-9034-4883","url":"https://friedarosa.github.io","email":"wolke@fzp.czu.cz","corresponding":true}],"date":"2023-05-29"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}