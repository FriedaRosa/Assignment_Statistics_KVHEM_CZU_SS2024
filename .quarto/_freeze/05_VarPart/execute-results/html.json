{
  "hash": "238801ebcafdad1331919bd0de7fb7c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"MachineLearning - Script 5 - Variation Partitioning\"\nauthor: \n  - name: \"MSc. Friederike Johanna Rosa WÃ¶lke\"\n    orcid: \"0000-0001-9034-4883\"\n    url: \"https://friedarosa.github.io\"\n    email: \"wolke@fzp.czu.cz\"\n    corresponding: true\ndate: \"2023-05-29\"\n---\n\n\n::: panel-tabset\n## Source custom functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n#setwd(\"StaticPatterNN/\")\nsource(\"src/functions.R\")\n```\n:::\n\n\n## MachineLearning packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npckgs <- c(\"dplyr\", \"ggplot2\", \"reshape2\", \n           \"ggcorrplot\", \n           \"caret\",  \"recipes\",   \"caretEnsemble\", \n           \"randomForest\", \"ranger\", \"gbm\", \"xgboost\", \n           \"vegan\", \"pdp\", \n           \"gridExtra\", \"kableExtra\")\n\ninstall_and_load(pckgs)\n```\n:::\n\n\n## Load RData to reduce computing time\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load workspace to save computing time:\nload(\"data/RData/04_VarPart.RData\")\n```\n:::\n\n:::\n\n### Variation Partitioning between Hypotheses\n\nNow we will look which of the four hypotheses explains most variation in the response.\nFirst will will use the varpart function from the vegan package for this, and second we will do the same manually with random forest models.\n\n::: panel-tabset\n## Jaccard - Sampling Period 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_train <- dat_train_J1\n# Create a data frame for each set of variables\nH1_data <- dat_train %>% select(any_of(H1_vars))\nH2_data <- dat_train %>% select(any_of(H2_vars))\nH3_data <- dat_train %>% select(any_of(H3_vars))\nH4_data <- dat_train %>% select(any_of(H4_vars))\n\n# Perform basic variation partitioning (vegan package)\nvarpart_model1 <- varpart(dat_train$Jaccard, H1_data, H2_data, H3_data, H4_data)\n\n## VENN-diagram\nplot(varpart_model1,\n     Xnames = c(\"Species Traits\", \"Species Range Geometry\", \"Diversity\", \"Atlas characteristics\"), # name the partitions\n     bg = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"), alpha = 80, # colour the circles\n     digits = 2, # only show 2 digits\n     cex = 0.8,\n     id.size = 1)\n```\n\n::: {.cell-output-display}\n![](05_VarPart_files/figure-html/var-part-vegan-J1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Test for significance in results:\nanova.cca(rda(dat_train$Jaccard, H1_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$Jaccard, Y = H1_data)\n          Df Variance      F Pr(>F)    \nModel     39 0.012014 3.5647  0.001 ***\nResidual 786 0.067925                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$Jaccard, H2_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$Jaccard, Y = H2_data)\n          Df Variance      F Pr(>F)    \nModel     21 0.064875 164.87  0.001 ***\nResidual 804 0.015065                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$Jaccard, H3_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$Jaccard, Y = H3_data)\n          Df Variance      F Pr(>F)    \nModel      2 0.010157 59.894  0.001 ***\nResidual 823 0.069783                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$Jaccard, H4_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$Jaccard, Y = H4_data)\n          Df Variance      F Pr(>F)    \nModel      3  0.01227 49.682  0.001 ***\nResidual 822  0.06767                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n## Jaccard - Sampling Period 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_train <- dat_train_J2\n\n# Create a data frame for each set of variables\nH1_data <- dat_train %>% select(any_of(H1_vars))\nH2_data <- dat_train %>% select(any_of(H2_vars))\nH3_data <- dat_train %>% select(any_of(H3_vars))\nH4_data <- dat_train %>% select(any_of(H4_vars))\n\n# Perform basic variation partitioning (vegan package)\n# varpart_model2 <- varpart(dat_train$Jaccard, H1_data, H2_data, H3_data, H4_data)\n\n# # Print the results\n# print(varpart_model2)\n# summary(varpart_model2)\n\n# ## VENN-diagram\n# plot(varpart_model2,\n#      Xnames = c(\"Species Traits\", \"Species Range Geometry\", \"Diversity\", \"Atlas characteristics\"), # name the partitions\n#      bg = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"), alpha = 80, # colour the circles\n#      digits = 2, # only show 2 digits\n#      cex = 0.8,\n#      id.size = 1)\n\n# Test for significance in results:\nanova.cca(rda(dat_train$Jaccard, H1_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$Jaccard, Y = H1_data)\n          Df Variance      F Pr(>F)    \nModel     39 0.011997 3.5687  0.001 ***\nResidual 783 0.067491                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$Jaccard, H2_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$Jaccard, Y = H2_data)\n          Df Variance      F Pr(>F)    \nModel     20 0.062354 145.94  0.001 ***\nResidual 802 0.017134                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$Jaccard, H3_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$Jaccard, Y = H3_data)\n          Df Variance      F Pr(>F)    \nModel      2 0.009814 57.752  0.001 ***\nResidual 820 0.069674                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$Jaccard, H4_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$Jaccard, Y = H4_data)\n          Df Variance      F Pr(>F)    \nModel      3 0.012329 50.117  0.001 ***\nResidual 819 0.067159                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n## Log Ratio - Sampling Period 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_train <- dat_train_LR1\n# Create a data frame for each set of variables\nH1_data <- dat_train %>% select(any_of(H1_vars))\nH2_data <- dat_train %>% select(any_of(H2_vars))\nH3_data <- dat_train %>% select(any_of(H3_vars))\nH4_data <- dat_train %>% select(any_of(H4_vars))\n\n# # Perform basic variation partitioning (vegan package)\n# varpart_model3 <- varpart(dat_train$log_R2_1, H1_data, H2_data, H3_data, H4_data)\n\n# # Print the results\n# print(varpart_model3)\n# summary(varpart_model3)\n\n\n\n# ## VENN-diagram\n# plot(varpart_model3,\n#      Xnames = c(\"Species Traits\", \"Species Range Geometry\", \"Diversity\", \"Atlas characteristics\"), # name the partitions\n#      bg = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"), alpha = 80, # colour the circles\n#      digits = 2, # only show 2 digits\n#      cex = 0.8,\n#      id.size = 1)\n\n\n# Test for significance in results:\nanova.cca(rda(dat_train$log_R2_1, H1_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$log_R2_1, Y = H1_data)\n          Df Variance      F Pr(>F)    \nModel     39 0.032133 2.2661  0.001 ***\nResidual 786 0.285784                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$log_R2_1, H2_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$log_R2_1, Y = H2_data)\n          Df Variance      F Pr(>F)    \nModel     21 0.040627 5.6094  0.001 ***\nResidual 804 0.277290                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$log_R2_1, H3_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$log_R2_1, Y = H3_data)\n          Df Variance      F Pr(>F)    \nModel      2 0.008244 10.954  0.001 ***\nResidual 823 0.309673                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$log_R2_1, H4_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$log_R2_1, Y = H4_data)\n          Df Variance      F Pr(>F)    \nModel      3 0.007065 6.2272  0.001 ***\nResidual 822 0.310852                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n## Log Ratio - Sampling Period 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_train <- dat_train_LR2\n# Create a data frame for each set of variables\nH1_data <- dat_train %>% select(any_of(H1_vars))\nH2_data <- dat_train %>% select(any_of(H2_vars))\nH3_data <- dat_train %>% select(any_of(H3_vars))\nH4_data <- dat_train %>% select(any_of(H4_vars))\n\n# Perform basic variation partitioning (vegan package)\nvarpart_model4 <- varpart(dat_train$log_R2_1, H1_data, H2_data, H3_data, H4_data)\n\n\n## VENN-diagram\nplot(varpart_model4,\n     Xnames = c(\"Species Traits\", \"Species Range Geometry\", \"Diversity\", \"Atlas characteristics\"), # name the partitions\n     bg = c(\"seagreen3\", \"mediumpurple\", \"darkorange\", \"gold\"), alpha = 80, # colour the circles\n     digits = 2, # only show 2 digits\n     cex = 0.8,\n     id.size = 1)\n```\n\n::: {.cell-output-display}\n![](05_VarPart_files/figure-html/var-part-vegan-LR2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Test for significance in results:\nanova.cca(rda(dat_train$log_R2_1, H1_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$log_R2_1, Y = H1_data)\n          Df Variance      F Pr(>F)   \nModel     40  0.03163 2.2173  0.003 **\nResidual 782  0.27888                 \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$log_R2_1, H2_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$log_R2_1, Y = H2_data)\n          Df Variance      F Pr(>F)    \nModel     20 0.044121 6.6415  0.001 ***\nResidual 802 0.266392                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$log_R2_1, H3_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$log_R2_1, Y = H3_data)\n          Df Variance      F Pr(>F)    \nModel      2  0.00942 12.827  0.001 ***\nResidual 820  0.30109                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova.cca(rda(dat_train$log_R2_1, H4_data)) # sign. p = 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(X = dat_train$log_R2_1, Y = H4_data)\n          Df Variance      F Pr(>F)    \nModel      3 0.007132 6.4176  0.001 ***\nResidual 819 0.303381                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n:::\n\n::: panel-tabset\n## Jaccard - Sampling Period 1\nrun time at server: ca. 30 min\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindex_list <- list(indices_J1, indices_J2, indices_LR1, indices_LR2)\ndat_train_list <- list(dat_train_J1, dat_train_J2, dat_train_LR1, dat_train_LR2)\n\ndat_train <- dat_train_J1\n\ntrainControl <- trainControl(\n    method = \"repeatedcv\",\n    number = 10,\n    repeats = 3,\n    savePredictions = \"final\",\n    returnResamp = \"final\",\n    verboseIter = TRUE,\n    index = indices_J1)\n\ntictoc::tic(\"ranger full model\")\nset.seed(42)\nfull_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train,\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n# Train ranger model\ntictoc::tic(\"ranger H1\")\nset.seed(42)\nH1_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(H1_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H2\")\nset.seed(42)\nH2_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(H2_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H3\")\nset.seed(42)\nH3_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(H3_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\ntictoc::tic(\"ranger H4\")\nset.seed(42)\nH4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(H4_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n### combinations of 2 hypotheses:\n\nset.seed(42)\nH1H2_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H3_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH3H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\n### combinations of 3 hypotheses together =====\n\nset.seed(42)\nH1H2H3_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H2H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH2H3H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nJ1_varPart_ranger_list <- list(\n    full_ranger, H1_ranger, H2_ranger, H3_ranger, H4_ranger, \n    H1H2_ranger, H1H3_ranger, H1H4_ranger, \n    H2H3_ranger, H2H4_ranger, \n    H3H4_ranger, \n    H1H2H3_ranger, H1H2H4_ranger, H1H3H4_ranger, \n    H2H3H4_ranger)\n# saveRDS(J1_varPart_ranger_list, \"data/J1_varPart_list.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ===== Performance eval ======= #\nperformances <- replicate(4, list())\ndat_test <- dat_test_J1\n# Predict on your test data\npredictions_full <- predict(J1_varPart_ranger_list[[1]], newdata = dat_test)\n\npredictions_H1 <- predict(J1_varPart_ranger_list[[2]], newdata = dat_test)\npredictions_H2 <- predict(J1_varPart_ranger_list[[3]], newdata = dat_test)\npredictions_H3 <- predict(J1_varPart_ranger_list[[4]], newdata = dat_test)\npredictions_H4 <- predict(J1_varPart_ranger_list[[5]], newdata = dat_test)\n\npredictions_H1H2 <- predict(J1_varPart_ranger_list[[6]], newdata = dat_test)\npredictions_H1H3 <- predict(J1_varPart_ranger_list[[7]], newdata = dat_test)\npredictions_H1H4 <- predict(J1_varPart_ranger_list[[8]], newdata = dat_test)\npredictions_H2H3 <- predict(J1_varPart_ranger_list[[9]], newdata = dat_test)\npredictions_H2H4 <- predict(J1_varPart_ranger_list[[10]], newdata = dat_test)\npredictions_H3H4 <- predict(J1_varPart_ranger_list[[11]], newdata = dat_test)\n\npredictions_H1H2H3 <- predict(J1_varPart_ranger_list[[12]], newdata = dat_test)\npredictions_H1H2H4 <- predict(J1_varPart_ranger_list[[13]], newdata = dat_test)\npredictions_H1H3H4 <- predict(J1_varPart_ranger_list[[14]], newdata = dat_test)\npredictions_H2H3H4 <- predict(J1_varPart_ranger_list[[15]], newdata = dat_test)\n\n# Calculate the performance metrics\nperf1 <- rbind(postResample(pred = predictions_full, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H1, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H2, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H3, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H4, obs = dat_test$Jaccard),\n              \n              postResample(pred = predictions_H1H2, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H1H3, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H1H4, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H2H3, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H2H4, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H3H4, obs = dat_test$Jaccard),\n              \n              postResample(pred = predictions_H1H2H3, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H1H2H4, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H1H3H4, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H2H3H4, obs = dat_test$Jaccard)) %>% \n                as.data.frame() %>% \n                round(4)\n\nmodel <- c(\"full\", \n            seq(1:4), \n            \"H1H2\", \"H1H3\", \"H1H4\", \"H2H3\", \"H2H4\", \"H3H4\", \n            \"H1H2H3\", \"H1H2H4\", \"H1H3H4\", \"H2H3H4\")\nperf1$model <- model\nperf1$subset <- \"J1\"\n\n# Print the performance metrics\n\nperf1 %>% \n    kableExtra::kable()\n```\n\n::: {.cell-output-display}\n\n\n|   RMSE| Rsquared|    MAE|model  |subset |\n|------:|--------:|------:|:------|:------|\n| 0.1165|   0.8203| 0.0742|full   |J1     |\n| 0.2593|   0.1080| 0.2185|1      |J1     |\n| 0.1181|   0.8159| 0.0761|2      |J1     |\n| 0.2365|   0.3063| 0.1855|3      |J1     |\n| 0.2576|   0.1182| 0.2193|4      |J1     |\n| 0.1188|   0.8137| 0.0749|H1H2   |J1     |\n| 0.1948|   0.4960| 0.1524|H1H3   |J1     |\n| 0.2282|   0.3058| 0.1851|H1H4   |J1     |\n| 0.1166|   0.8205| 0.0749|H2H3   |J1     |\n| 0.1170|   0.8192| 0.0755|H2H4   |J1     |\n| 0.2224|   0.3581| 0.1779|H3H4   |J1     |\n| 0.1171|   0.8183| 0.0743|H1H2H3 |J1     |\n| 0.1185|   0.8146| 0.0747|H1H2H4 |J1     |\n| 0.1936|   0.5022| 0.1508|H1H3H4 |J1     |\n| 0.1171|   0.8183| 0.0743|H2H3H4 |J1     |\n\n\n:::\n\n```{.r .cell-code}\nperf1 %>% \n    kableExtra::kable() %>% \n    write.csv(\"data/performance_varExpl_rf_J1.csv\")\n\nperformances[[1]] <- list(\n    J1 = slice_min(perf1, RMSE) %>% \n    slice_max(Rsquared))\n\n\n# Create a bar plot of variance explained\nggplot(perf1, aes(x = reorder(model, RMSE), y = Rsquared)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Model\", y = \"Variance Explained\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05_VarPart_files/figure-html/var-part-ranger-performance-eval-J1-1.png){width=672}\n:::\n:::\n\n\n## Jaccard - Sampling period 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_train <- dat_train_J2\n\ntrainControl <- trainControl(\n    method = \"repeatedcv\",\n    number = 10,\n    repeats = 3,\n    savePredictions = \"final\",\n    returnResamp = \"final\",\n    verboseIter = TRUE,\n    index = indices_J2)\n\ntictoc::tic(\"ranger full model\")\nset.seed(42)\nfull_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train,\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n# Train ranger model\ntictoc::tic(\"ranger H1\")\nset.seed(42)\nH1_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(H1_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H2\")\nset.seed(42)\nH2_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(H2_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H3\")\nset.seed(42)\nH3_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(H3_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\ntictoc::tic(\"ranger H4\")\nset.seed(42)\nH4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(H4_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n### combinations of 2 hypotheses:\n\nset.seed(42)\nH1H2_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H3_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH3H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\n### combinations of 3 hypotheses together =====\n\nset.seed(42)\nH1H2H3_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H2H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH2H3H4_ranger <- train(\n    Jaccard ~ .,\n    data = dat_train %>% select(Jaccard, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nJ2_varPart_ranger_list <- list(\n    full_ranger, H1_ranger, H2_ranger, H3_ranger, H4_ranger, \n    H1H2_ranger, H1H3_ranger, H1H4_ranger, \n    H2H3_ranger, H2H4_ranger, \n    H3H4_ranger, \n    H1H2H3_ranger, H1H2H4_ranger, H1H3H4_ranger, \n    H2H3H4_ranger)\nsaveRDS(J2_varPart_ranger_list, \"data/J2_varPart_list.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ===== Performance eval ======= #\ndat_test <- dat_test_J2\n\n# Predict on your test data\npredictions_full <- predict(J2_varPart_ranger_list[[1]], newdata = dat_test)\n\npredictions_H1 <- predict(J2_varPart_ranger_list[[2]], newdata = dat_test)\npredictions_H2 <- predict(J2_varPart_ranger_list[[3]], newdata = dat_test)\npredictions_H3 <- predict(J2_varPart_ranger_list[[4]], newdata = dat_test)\npredictions_H4 <- predict(J2_varPart_ranger_list[[5]], newdata = dat_test)\n\npredictions_H1H2 <- predict(J2_varPart_ranger_list[[6]], newdata = dat_test)\npredictions_H1H3 <- predict(J2_varPart_ranger_list[[7]], newdata = dat_test)\npredictions_H1H4 <- predict(J2_varPart_ranger_list[[8]], newdata = dat_test)\npredictions_H2H3 <- predict(J2_varPart_ranger_list[[9]], newdata = dat_test)\npredictions_H2H4 <- predict(J2_varPart_ranger_list[[10]], newdata = dat_test)\npredictions_H3H4 <- predict(J2_varPart_ranger_list[[11]], newdata = dat_test)\n\npredictions_H1H2H3 <- predict(J2_varPart_ranger_list[[12]], newdata = dat_test)\npredictions_H1H2H4 <- predict(J2_varPart_ranger_list[[13]], newdata = dat_test)\npredictions_H1H3H4 <- predict(J2_varPart_ranger_list[[14]], newdata = dat_test)\npredictions_H2H3H4 <- predict(J2_varPart_ranger_list[[15]], newdata = dat_test)\n\n# Calculate the performance metrics\nperf2 <- rbind(postResample(pred = predictions_full, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H1, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H2, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H3, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H4, obs = dat_test$Jaccard),\n              \n              postResample(pred = predictions_H1H2, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H1H3, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H1H4, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H2H3, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H2H4, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H3H4, obs = dat_test$Jaccard),\n              \n              postResample(pred = predictions_H1H2H3, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H1H2H4, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H1H3H4, obs = dat_test$Jaccard),\n              postResample(pred = predictions_H2H3H4, obs = dat_test$Jaccard)) %>% \n                as.data.frame() %>% \n                round(4)\n\nmodel <- c(\"full\", \n            seq(1:4), \n            \"H1H2\", \"H1H3\", \"H1H4\", \"H2H3\", \"H2H4\", \"H3H4\", \n            \"H1H2H3\", \"H1H2H4\", \"H1H3H4\", \"H2H3H4\")\nperf2$model <- model\nperf2$subset <- \"J2\"\n# Print the performance metrics\nperformances[[2]] <- list(\n    J2 = slice_min(perf2, RMSE) %>% \n    slice_max(Rsquared))\n\nperf2 %>% \n    kableExtra::kable()\n```\n\n::: {.cell-output-display}\n\n\n|   RMSE| Rsquared|    MAE|model  |subset |\n|------:|--------:|------:|:------|:------|\n| 0.1248|   0.7970| 0.0806|full   |J2     |\n| 0.2595|   0.1364| 0.2206|1      |J2     |\n| 0.1299|   0.7807| 0.0844|2      |J2     |\n| 0.2229|   0.3726| 0.1748|3      |J2     |\n| 0.2604|   0.1175| 0.2206|4      |J2     |\n| 0.1259|   0.7932| 0.0819|H1H2   |J2     |\n| 0.1929|   0.5210| 0.1594|H1H3   |J2     |\n| 0.2310|   0.3052| 0.1903|H1H4   |J2     |\n| 0.1280|   0.7869| 0.0820|H2H3   |J2     |\n| 0.1300|   0.7802| 0.0841|H2H4   |J2     |\n| 0.2112|   0.4193| 0.1717|H3H4   |J2     |\n| 0.1247|   0.7974| 0.0807|H1H2H3 |J2     |\n| 0.1257|   0.7938| 0.0819|H1H2H4 |J2     |\n| 0.1898|   0.5354| 0.1549|H1H3H4 |J2     |\n| 0.1247|   0.7974| 0.0807|H2H3H4 |J2     |\n\n\n:::\n\n```{.r .cell-code}\nperf2 %>% \n    kableExtra::kable() %>% \n    write.csv(\"data/performance_varExpl_rf_J2.csv\")\n\n# Create a bar plot of variance explained\nggplot(perf2, aes(x = reorder(model, RMSE), y = Rsquared)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Model\", y = \"Variance Explained\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05_VarPart_files/figure-html/var-part-ranger-performance-eval-J2-1.png){width=672}\n:::\n:::\n\n\n## Log Ratio - Sampling period 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_train <- dat_train_LR1\n\ntrainControl <- trainControl(\n    method = \"repeatedcv\",\n    number = 10,\n    repeats = 3,\n    savePredictions = \"final\",\n    returnResamp = \"final\",\n    verboseIter = TRUE,\n    index = indices_LR1)\n\ntictoc::tic(\"ranger full model\")\nset.seed(42)\nfull_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train,\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n# Train ranger model\ntictoc::tic(\"ranger H1\")\nset.seed(42)\nH1_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(H1_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H2\")\nset.seed(42)\nH2_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(H2_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H3\")\nset.seed(42)\nH3_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(H3_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\ntictoc::tic(\"ranger H4\")\nset.seed(42)\nH4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(H4_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n### combinations of 2 hypotheses:\n\nset.seed(42)\nH1H2_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H3_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH3H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\n### combinations of 3 hypotheses together =====\n\nset.seed(42)\nH1H2H3_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H2H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH2H3H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nLR1_varPart_ranger_list <- list(\n    full_ranger, H1_ranger, H2_ranger, H3_ranger, H4_ranger, \n    H1H2_ranger, H1H3_ranger, H1H4_ranger, \n    H2H3_ranger, H2H4_ranger, \n    H3H4_ranger, \n    H1H2H3_ranger, H1H2H4_ranger, H1H3H4_ranger, \n    H2H3H4_ranger)\nsaveRDS(LR1_varPart_ranger_list, \"data/LR1_varPart_list.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ===== Performance eval ======= #\ndat_test <- dat_test_LR1\n\n# Predict on your test data\npredictions_full <- predict(LR1_varPart_ranger_list[[1]], newdata = dat_test)\n\npredictions_H1 <- predict(LR1_varPart_ranger_list[[2]], newdata = dat_test)\npredictions_H2 <- predict(LR1_varPart_ranger_list[[3]], newdata = dat_test)\npredictions_H3 <- predict(LR1_varPart_ranger_list[[4]], newdata = dat_test)\npredictions_H4 <- predict(LR1_varPart_ranger_list[[5]], newdata = dat_test)\n\npredictions_H1H2 <- predict(LR1_varPart_ranger_list[[6]], newdata = dat_test)\npredictions_H1H3 <- predict(LR1_varPart_ranger_list[[7]], newdata = dat_test)\npredictions_H1H4 <- predict(LR1_varPart_ranger_list[[8]], newdata = dat_test)\npredictions_H2H3 <- predict(LR1_varPart_ranger_list[[9]], newdata = dat_test)\npredictions_H2H4 <- predict(LR1_varPart_ranger_list[[10]], newdata = dat_test)\npredictions_H3H4 <- predict(LR1_varPart_ranger_list[[11]], newdata = dat_test)\n\npredictions_H1H2H3 <- predict(LR1_varPart_ranger_list[[12]], newdata = dat_test)\npredictions_H1H2H4 <- predict(LR1_varPart_ranger_list[[13]], newdata = dat_test)\npredictions_H1H3H4 <- predict(LR1_varPart_ranger_list[[14]], newdata = dat_test)\npredictions_H2H3H4 <- predict(LR1_varPart_ranger_list[[15]], newdata = dat_test)\n\n# Calculate the performance metrics\nperf3 <- rbind(postResample(pred = predictions_full, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H1, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H2, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H3, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H4, obs = dat_test$log_R2_1),\n              \n              postResample(pred = predictions_H1H2, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H1H3, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H1H4, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H2H3, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H2H4, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H3H4, obs = dat_test$log_R2_1),\n              \n              postResample(pred = predictions_H1H2H3, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H1H2H4, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H1H3H4, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H2H3H4, obs = dat_test$log_R2_1)) %>% \n                as.data.frame() %>% \n                round(4)\n\nmodel <- c(\"full\", \n            seq(1:4), \n            \"H1H2\", \"H1H3\", \"H1H4\", \"H2H3\", \"H2H4\", \"H3H4\", \n            \"H1H2H3\", \"H1H2H4\", \"H1H3H4\", \"H2H3H4\")\nperf3$model <- model\nperf3$subset <- \"LR1\"\n# Print the performance metrics\nperformances[[3]] <- list(\n    LR1 = slice_min(perf3, RMSE) %>% \n    slice_max(Rsquared))\n\n# Print the performance metrics\n\nperf3 %>% \n    kableExtra::kable()\n```\n\n::: {.cell-output-display}\n\n\n|   RMSE| Rsquared|    MAE|model  |subset |\n|------:|--------:|------:|:------|:------|\n| 0.4614|   0.1608| 0.2793|full   |LR1    |\n| 0.4793|   0.1116| 0.3031|1      |LR1    |\n| 0.5045|   0.0221| 0.2990|2      |LR1    |\n| 0.5499|   0.0021| 0.3673|3      |LR1    |\n| 0.5051|   0.0046| 0.3209|4      |LR1    |\n| 0.4647|   0.1507| 0.2798|H1H2   |LR1    |\n| 0.4542|   0.1887| 0.2964|H1H3   |LR1    |\n| 0.4574|   0.1814| 0.2972|H1H4   |LR1    |\n| 0.5031|   0.0339| 0.3006|H2H3   |LR1    |\n| 0.5015|   0.0291| 0.2976|H2H4   |LR1    |\n| 0.5040|   0.0124| 0.3207|H3H4   |LR1    |\n| 0.4568|   0.1822| 0.2768|H1H2H3 |LR1    |\n| 0.4645|   0.1485| 0.2804|H1H2H4 |LR1    |\n| 0.4538|   0.1899| 0.2953|H1H3H4 |LR1    |\n| 0.4568|   0.1822| 0.2768|H2H3H4 |LR1    |\n\n\n:::\n\n```{.r .cell-code}\nperf3 %>% \n    kableExtra::kable() %>% \n    write.csv(\"data/performance_varExpl_rf_LR1.csv\")\n\n\n # Create a bar plot of variance explained\nggplot(perf3, aes(x = reorder(model, RMSE), y = Rsquared)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Model\", y = \"Variance Explained\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05_VarPart_files/figure-html/var-part-ranger-performance-eval-LR1-1.png){width=672}\n:::\n:::\n\n\n## Log Ratio - Sampling period 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_train <- dat_train_LR2\n\ntrainControl <- trainControl(\n    method = \"repeatedcv\",\n    number = 10,\n    repeats = 3,\n    savePredictions = \"final\",\n    returnResamp = \"final\",\n    verboseIter = TRUE,\n    index = indices_LR2)\n\ntictoc::tic(\"ranger full model\")\nset.seed(42)\nfull_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train,\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n# Train ranger model\ntictoc::tic(\"ranger H1\")\nset.seed(42)\nH1_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(H1_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H2\")\nset.seed(42)\nH2_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(H2_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\ntictoc::tic(\"ranger H3\")\nset.seed(42)\nH3_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(H3_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\ntictoc::tic(\"ranger H4\")\nset.seed(42)\nH4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(H4_vars)),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\ntictoc::toc()\n\n\n### combinations of 2 hypotheses:\n\nset.seed(42)\nH1H2_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H3_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\nset.seed(42)\nH2H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH3H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\n\n### combinations of 3 hypotheses together =====\n\nset.seed(42)\nH1H2H3_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H2H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH1H3H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H3_vars, H4_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nset.seed(42)\nH2H3H4_ranger <- train(\n    log_R2_1 ~ .,\n    data = dat_train %>% select(log_R2_1, any_of(c(H1_vars, H2_vars, H3_vars))),\n    method = \"ranger\",\n    trControl = trainControl,\n    importance = \"permutation\",\n    scale.permutation.importance = TRUE,\n    num.trees = 5000,\n    respect.unordered.factors = TRUE,\n    oob.error = TRUE,\n    tuneLength = 5)\n\nLR2_varPart_ranger_list <- list(\n    full_ranger, H1_ranger, H2_ranger, H3_ranger, H4_ranger, \n    H1H2_ranger, H1H3_ranger, H1H4_ranger, \n    H2H3_ranger, H2H4_ranger, \n    H3H4_ranger, \n    H1H2H3_ranger, H1H2H4_ranger, H1H3H4_ranger, \n    H2H3H4_ranger)\nsaveRDS(LR2_varPart_ranger_list, \"data/LR2_varPart_list.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ===== Performance eval ======= #\ndat_test <- dat_test_LR2\n# Predict on your test data\npredictions_full <- predict(LR2_varPart_ranger_list[[1]], newdata = dat_test)\n\npredictions_H1 <- predict(LR2_varPart_ranger_list[[2]], newdata = dat_test)\npredictions_H2 <- predict(LR2_varPart_ranger_list[[3]], newdata = dat_test)\npredictions_H3 <- predict(LR2_varPart_ranger_list[[4]], newdata = dat_test)\npredictions_H4 <- predict(LR2_varPart_ranger_list[[5]], newdata = dat_test)\n\npredictions_H1H2 <- predict(LR2_varPart_ranger_list[[6]], newdata = dat_test)\npredictions_H1H3 <- predict(LR2_varPart_ranger_list[[7]], newdata = dat_test)\npredictions_H1H4 <- predict(LR2_varPart_ranger_list[[8]], newdata = dat_test)\npredictions_H2H3 <- predict(LR2_varPart_ranger_list[[9]], newdata = dat_test)\npredictions_H2H4 <- predict(LR2_varPart_ranger_list[[10]], newdata = dat_test)\npredictions_H3H4 <- predict(LR2_varPart_ranger_list[[11]], newdata = dat_test)\n\npredictions_H1H2H3 <- predict(LR2_varPart_ranger_list[[12]], newdata = dat_test)\npredictions_H1H2H4 <- predict(LR2_varPart_ranger_list[[13]], newdata = dat_test)\npredictions_H1H3H4 <- predict(LR2_varPart_ranger_list[[14]], newdata = dat_test)\npredictions_H2H3H4 <- predict(LR2_varPart_ranger_list[[15]], newdata = dat_test)\n\n# Calculate the performance metrics\nperf4 <- rbind(postResample(pred = predictions_full, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H1, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H2, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H3, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H4, obs = dat_test$log_R2_1),\n              \n              postResample(pred = predictions_H1H2, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H1H3, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H1H4, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H2H3, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H2H4, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H3H4, obs = dat_test$log_R2_1),\n              \n              postResample(pred = predictions_H1H2H3, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H1H2H4, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H1H3H4, obs = dat_test$log_R2_1),\n              postResample(pred = predictions_H2H3H4, obs = dat_test$log_R2_1)) %>% \n                as.data.frame() %>% \n                round(4)\n\nmodel <- c(\"full\", \n            seq(1:4), \n            \"H1H2\", \"H1H3\", \"H1H4\", \"H2H3\", \"H2H4\", \"H3H4\", \n            \"H1H2H3\", \"H1H2H4\", \"H1H3H4\", \"H2H3H4\")\nperf4$model <- model\n\n# Print the performance metrics\n\nperf4 %>% \n    kableExtra::kable()\n```\n\n::: {.cell-output-display}\n\n\n|   RMSE| Rsquared|    MAE|model  |\n|------:|--------:|------:|:------|\n| 0.5129|   0.0895| 0.2932|full   |\n| 0.5206|   0.0535| 0.3033|1      |\n| 0.5373|   0.0350| 0.3153|2      |\n| 0.5661|   0.0127| 0.3546|3      |\n| 0.5387|   0.0011| 0.3314|4      |\n| 0.5132|   0.0884| 0.2916|H1H2   |\n| 0.5196|   0.0733| 0.3027|H1H3   |\n| 0.5198|   0.0742| 0.3053|H1H4   |\n| 0.5390|   0.0350| 0.3180|H2H3   |\n| 0.5363|   0.0346| 0.3146|H2H4   |\n| 0.5336|   0.0148| 0.3273|H3H4   |\n| 0.5131|   0.0873| 0.2919|H1H2H3 |\n| 0.5140|   0.0868| 0.2928|H1H2H4 |\n| 0.5224|   0.0654| 0.3082|H1H3H4 |\n| 0.5131|   0.0873| 0.2919|H2H3H4 |\n\n\n:::\n\n```{.r .cell-code}\nperf4 %>% \n    kableExtra::kable() %>% \n    write.csv(\"data/performance_varExpl_rf_LR2.csv\")\n\nperf4$subset <- \"LR2\"\n# Print the performance metrics\nperformances[[4]] <- list(\n    LR2 = slice_min(perf4, RMSE) %>% \n    slice_max(Rsquared))\n\n\n\n# Create a bar plot of variance explained\nggplot(perf4, aes(x = reorder(model, RMSE), y = Rsquared)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Model\", y = \"Variance Explained\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05_VarPart_files/figure-html/var-part-ranger-performance-eval-LR2-1.png){width=672}\n:::\n:::\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo.call(rbind, unlist(performances, recursive = F)) %>% kableExtra::kable()\n```\n\n::: {.cell-output-display}\n\n\n|     |   RMSE| Rsquared|    MAE|model  |subset |\n|:----|------:|--------:|------:|:------|:------|\n|J1   | 0.1165|   0.8203| 0.0742|full   |J1     |\n|J2.1 | 0.1247|   0.7974| 0.0807|H1H2H3 |J2     |\n|J2.2 | 0.1247|   0.7974| 0.0807|H2H3H4 |J2     |\n|LR1  | 0.4538|   0.1899| 0.2953|H1H3H4 |LR1    |\n|LR2  | 0.5129|   0.0895| 0.2932|full   |LR2    |\n\n\n:::\n\n```{.r .cell-code}\n# save.image(\"data/RData/04_VarPart.RData\")\n```\n:::\n",
    "supporting": [
      "05_VarPart_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}